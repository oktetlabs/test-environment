#! /bin/bash
#
# Test Coverage Estimation
# Process TCE for all NUT images
#
#
# Copyright (C) 2005 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author: Elena Vengerova <Elena.Vengerova@oktetlabs.ru>
#
# $Id$
#

. "${TE_BUILD}/builder.conf.processed"

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/te_functions

for platform in $TE_BS_PLATFORMS; do
    tce_list="$*"
    if test "$tce_list" = all; then
        alltce="TE_BS_TCE_$platform"
        tce_list="${!alltce}"
    fi
    fake_sbd=
    if test -n "$tce_list" -a -f "${TE_BUILD}/${platform}.sbd"; then
        # When shadow build directory is used, GCOV data files will be
        # created in that directory, instead of the normal build directory.
        # That's a limitation of GCC+GCOV which in principle can be
        # circumvented by a combination of GCC scripts and environment
        # variables, but it seems like this way is simpler and more reliable
        sbd="$(cat "${TE_BUILD}/${platform}.sbd")"
        if test "${sbd}" != "${TE_BUILD}"; then
            te_eval_or_ssh "${platform}" "
               sudo tar -C '${sbd}' -czf - .
               sudo rm -rf '${sbd}' >/dev/null
            " | tar -C "${TE_BUILD}" -xzf -
            # The build directory may contain files with profilable code,
            # e.g. headers with inline functions.
            # If a shadow build directory has been used, it will be searched
            # by gcov, so we create a local fake symlink to it
            ln -s "${TE_BUILD}" "${sbd}"
            fake_sbd=1
        fi
    fi
    for tce in $tce_list ; do
        srcvar="TE_BS_TCE_${platform}_${tce}_SOURCES"
        if test -z "${!srcvar}"; then
            echo "warning: TCE component $tce not defined for platform $platform" >&2
            continue
        fi
        buildvar="TE_BS_TCE_${platform}_${tce}_BUILDDIR"
        if ! test -d "${!buildvar}" ; then
            echo "warning: TCE component $tce not built for platform $platform @ ${!buildvar}" >&2
            continue
        fi
        find "${!buildvar}" -name '*.da' -o -name '.*.da' -o -name '*.gcda' -o -name '.*.gcda' | \
            xargs -n1 tce_gcov || exit 1
        find "${!buildvar}" -name '*.gcov' -o -name '.*.gcov' | sort | \
            xargs -n1 tce_report >${TE_LOG_DIR}/tce_log_${platform}_${tce}.tce || exit 1
        mkdir -p ${TE_LOG_DIR}/tce_log_${platform}_${tce}_files
        excludevar="TE_BS_TCE_${platform}_${tce}_EXCLUDESRC"
        tce_summary -vEXCLUDE="${!excludevar}" -vSORTMODE=coverage \
                    -vDATADIR=${TE_LOG_DIR}/tce_log_${platform}_${tce}_files \
                    ${TE_LOG_DIR}/tce_log_${platform}_${tce}.tce > \
                    ${TE_LOG_DIR}/tce_log_${platform}_${tce}.html
    done
    test -n "$fake_sbd" && rm -f "$sbd"
done

