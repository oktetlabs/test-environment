#! /bin/bash
#
# Test Environment Builder
#
# Script for building of cross packages.
#
# Copyright (C) 2003-2018 OKTET Labs.
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
#
# $Id$
#

. ${TE_BUILD}/builder.conf.processed

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/te_functions

PREFIX=$1

take_agent_lock() {
    mkdir agents/$1/in_progress/ 2>/dev/null
}

put_agent_lock() {
    rmdir agents/$1/in_progress/
}

wait_progress () {
    local package=$1
    local in_prog_msg=

    mkdir -p agents/$package
    while true ; do
        take_agent_lock $package
        if [ $? -eq 0 ] ; then
            break
        fi
        if test "x$BUILD_TA_RM" == "xyes" ; then
            echo "WARNING: Removing build lock for agent: $package"
            put_agent_lock $package
            continue
        fi
        if test "x$in_prog_msg" == "x" ; then
            echo -n "$(date +%T) Agent $package building is already " >&2
            echo -n "in progress, waiting" >&2
            in_prog_msg="yes"
        fi
        echo -n "." >&2
        sleep 10
    done
    if test "x$in_prog_msg" == "xyes" ; then
        echo "" >&2
    fi
}

print_platform() {
    local HOSTVAR="${1}_HOST"
    local HOST=${!HOSTVAR}
    echo "${1}${HOST:+ on }${HOST}"
}

print_agent_log_files() {
    echo "$(readlink -f "$1").{1,2}.log"
}

print_build_agent_start() {
    echo "$(date +%T) Build agent $(print_platform $1) - start"
    echo "  location of log files: $(print_agent_log_files "$p")"
}

add_timestamps() {
    gawk -vHEADER="$1" '{
        print strftime("%F %T"), HEADER ":", $0
        fflush()
    }'
}

print_without_timestamps() {
    tail -f -c +1 --pid=$2 "$1" |
        sed -u 's/^[^ ]* [^ ]* [^ ]* //'
}

build_platform_and_agent() {
    local p=$1
    local mode=$2

    if test "$p" = "${TE_HOST}" ; then return ; fi
    if test -n "${CONSTRUCTED[$p]}" ; then return ; fi

    wait_progress $p
    print_build_agent_start "$p" >&2
    te_cross_build_autotools "${PREFIX}" "$p" "$mode" \
        2> >( add_timestamps stderr >$p.2.log ) \
        1> >( add_timestamps stdout >$p.1.log ) &
    PIDS[$!]="$p"
    CONSTRUCTED[$p]=yes
}

build() {
    declare -A ERRORS
    declare -A PIDS
    declare -A CONSTRUCTED

    for ta in ${BUILD_TA_FOR} ; do
        local TA_TYPE="$(te_hostname2shname "${ta}_TA_TYPE")"
        local p=${!TA_TYPE}
        if test -z "$p" ; then
            echo "Unknown hostname (--build-ta-for=$ta)" >&2
            exit 1
        fi
        build_platform_and_agent "$p" all
    done

    if test -n "${BUILD_TA}" ; then
        for p in ${TE_BS_PLATFORMS} ; do
            build_platform_and_agent "$p" "$BUILD_TA"
        done
    fi

    for pid in "${!PIDS[@]}"; do
        local p="${PIDS[$pid]}"

        print_without_timestamps "$p.2.log" "$pid" >&2 &
        local ppid="$!"

        wait "$pid"
        local res="$?"

        wait "$ppid"

        if test "$res" = "0" ; then
            echo "Build agent $(print_platform $p) - pass" >&2
        else
            echo "Build agent $(print_platform $p) - fail ($res)" >&2
            ERRORS[$p]=$res
        fi
        put_agent_lock $p
    done

    if test "${#ERRORS[@]}" -ne "0" ; then
        echo "Build failed. For more details see files:"
        for p in "${!ERRORS[@]}"; do
            echo "  $(print_agent_log_files "$p")"
        done

        # Returns the last value of an array (last error)
        exit "${ERRORS[@]:(-1)}"
    fi
}

build

exit 0
