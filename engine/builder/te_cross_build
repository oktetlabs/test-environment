#! /bin/bash
#
# Test Environment Builder
#
# Script for building of cross packages.
#
# Copyright (C) 2004 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
#
# $Id$
#

. ${TE_BUILD}/builder.conf.processed

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/te_functions

PREFIX=$1
DUMMY=

##
# Check the ability to create files in the given directory
#
# @param platform signature
# @param directory for check
#
# @par Scenario:
#
# -# Create a file and check the result
# -# Check that the file exists
# -# Remove the file and check the result
#
# Note: if any operation fails the script execution will be interrupted
#
fs_sanity_check() {
    local iseval=true
    te_eval_or_ssh "$1" "
        test -n \"\$iseval\" && return 0
        set -e
        fname=\"\$(mktemp \"$2/XXXXXX\")\"
        test -f \"\$fname\"
        rm \"\$fname\"
    "
    if test "$?" -ne "0" ; then
        echo "nfs sanity check fail ($2)" >&2
        exit 1
    fi
}

need_build_platform() {
    local p=$1
    local mode=$2

    if test "$mode" = "all" -o \
        ! -f platforms/${p}/include/Makefile ; then
        return 0
    fi

    local plibs="${p}_LIBS"
    LIBS="${!plibs}"
    for package in $LIBS ; do
        if test "$mode" = "all" -o \
            ! -f platforms/${p}/lib/$package/Makefile ; then
            return 0
        fi
    done

    return 1
}

install_extension_parts () {
    local p="$1"
    local srcdir="$2"
    local builddir="$3"
    local objlist="$4"
    local destdir="$5"

    if test -n "$objlist"; then
        (
            mkdir -p "$destdir"
            te_eval_or_ssh "$p" "cd '$srcdir';
            test -n '$builddir' && cd '$builddir';
            cp -a $objlist '$destdir'"
            find -H "$destdir" -type l | xargs ${TE_BASE}/engine/builder/te_fixlink "$PWD" "$destdir"
        )
    fi
}

build_extension() {
    local p="$1"
    local srcdir="$2"
    local prepare="$3"
    local builddir="$4"
    local build="$5"
    local telibs="$6"
    local expheaders="$7"
    local explibs="$8"
    local expbin="$9"
    local telibflags
    local l
    local v
    local exports

    shift
    local tatype="$9"
    shift
    local envvars="$9"

    telibflags="-L$PREFIX/$p/lib"
    for l in $telibs; do
        telibflags="$telibflags -l$l"
    done

    for v in $envvars; do
        exports="$exports export $v=\"${!v}\"; "
    done

    (
        cd "$srcdir"; eval "export EXT_BUILDDIR=\"${builddir:-.}\"; $prepare"
    ) || exit 1

    (
        te_eval_or_ssh "$p" "cd $srcdir ;
                      test -n \"$builddir\" && mkdir -p \"$builddir\" ;
                      cd ${builddir:-.} ;
                      export TE_PREFIX=\"$PREFIX/$p\" ;
                      export TE_CPPFLAGS=\"-I$PREFIX/$p/include\" ;
                      export TE_LDFLAGS=\"$telibflags\" ;
                      export EXT_SOURCES=\"$srcdir\" ;
                      $exports
                      $build"
    ) || exit 1
    install_extension_parts "$p" "$srcdir" "$builddir" "$expheaders" "$PREFIX/$p/include" || exit 1
    install_extension_parts "$p" "$srcdir" "$builddir" "$explibs" "$PREFIX/$p/lib" || exit 1
    install_extension_parts "$p" "$srcdir" "$builddir" "$expbin" "$PREFIX/agents/$tatype" || exit 1
}

build_platform() {
    local res
    local p=$1
    local mode=$2

    local sbd=${TE_BUILD}
    if test -f "${p}.sbd"; then
        sbd=$(cat "${p}.sbd")
    fi

    mkdir -p "platforms/${p}"
    fs_sanity_check "${p}" "platforms/${p}"
    if test "$mode" = "all" -o \
            ! -f ${sbd}/platforms/${p}/include/Makefile ; then
        local pexts="TE_BS_EXT_${p}"
        local pext

        for pext in ${!pexts}; do
             local pextsrc="TE_BS_EXT_${p}_${pext}_SOURCES"
             local pextprep="TE_BS_EXT_${p}_${pext}_PREPARE"
             local pextbuilddir="TE_BS_EXT_${p}_${pext}_BUILDDIR"
             local pextbuild="TE_BS_EXT_${p}_${pext}_BUILD"
             local pextinsth="TE_BS_EXT_${p}_${pext}_INSTALL_HEADERS"
             local pextinstl="TE_BS_EXT_${p}_${pext}_INSTALL_LIBS"
             local pextenv="TE_BS_EXT_${p}_${pext}_ENV_VARS"
             build_extension "$p" "${!pextsrc}" "${!pextprep}" \
                             "${!pextbuilddir/#${TE_BUILD}/${sbd}}" \
                             "${!pextbuild}" "" \
                             "${!pextinsth}" "${!pextinstl}" "${!pextenv}" || exit 1
        done

        ${TE_BASE}/engine/builder/te_configure_package INCLUDE include \
            "${p}_include" "${sbd}/platforms/${p}/include" \
            "$p" "${TE_BASE}/include" "$PREFIX" || exit 1
    fi

    local libs=
    local plibs="${p}_LIBS"
    LIBS="${!plibs}"
    for package in $LIBS ; do
        PKGNAME=${p}_$package
        local ppkgsrc="TE_BS_LIB_${PKGNAME}_SOURCES"
        PKGSRC="${!ppkgsrc}"
        if test -z "$PKGSRC" ; then
            PKGSRC=${TE_BASE}/lib/$package ;
        fi
        if test "$mode" = "all" -o \
            ! -f ${sbd}/platforms/${p}/lib/$package/Makefile ; then
            ${TE_BASE}/engine/builder/te_configure_package LIB "$package" \
                "${p}_$package" "${sbd}/platforms/${p}/lib/$package" \
                "$p" "$PKGSRC" "$PREFIX" || exit 1
            libs="$libs $package"
        fi
    done

    local TE_CFLAGS_NAME="${p}_CFLAGS_VAR"
    local TE_CPPFLAGS_NAME="${p}_CPPFLAGS_VAR"
    for package in $libs ; do
# Code "echo=echo" was added, for bug fixing of a look "X--tag=CC: command not found"
# See https://lists.gnu.org/archive/html/bug-libtool/2008-04/msg00011.html
        te_eval_or_ssh "${p}" "
            pushd ${sbd}/platforms/${p}/lib/$package >/dev/null
            echo=echo \\
            TE_CFLAGS_VAR='${!TE_CFLAGS_NAME}' \\
            TE_CPPFLAGS_VAR='${!TE_CPPFLAGS_NAME}' \\
            make ${BUILD_MAKEFLAGS} install || exit 1
            popd >/dev/null
        "
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done
    test -z "$libs"
}

need_build_agent() {
    local package=$1
    local mode=$2

    local pplatform="TE_BS_TA_${package}_PLATFORM"
    PLATFORM="${!pplatform}"
    if test "$PLATFORM" = "${TE_HOST}" ; then return 1 ; fi ;
    if test "$mode" != "all" -a -f agents/$package/ta ; then
        return 1
    fi
    return 0
}

build_agent() {
    local res
    local package=$1
    local mode=$2

    local pplatform="TE_BS_TA_${package}_PLATFORM"
    PLATFORM="${!pplatform}"
    if test "$PLATFORM" = "${TE_HOST}" ; then return 0 ; fi ;

    local sbd=${TE_BUILD}
    if test -f "${PLATFORM}.sbd"; then
        sbd=$(cat "${PLATFORM}.sbd")
    fi

    local ppkgsrc="TE_BS_TA_${package}_SOURCES"
    PKGSRC="${!ppkgsrc}"
    if test -z "$PKGSRC" ; then
        PKGSRC=${TE_BASE}/agents/$package ;
    fi
    if test "$mode" != "all" -a -f agents/$package/ta ; then
        return 0
    fi
    mkdir -p "agents/$package"
    fs_sanity_check "${PLATFORM}" "agents/$package"

    te_eval_or_ssh "${PLATFORM}" "
        mkdir -p \"${sbd}/agents/$package\"
        ${TE_BASE}/engine/builder/te_rcf_consistency_checks \
            --extfiles-del \"${sbd}/agents/$package/\"
        echo \"$TE_RCF_CONSISTENCY_CHECKS_EXT_FILES\" |
            ${TE_BASE}/engine/builder/te_rcf_consistency_checks \
                --extfiles-add \"${sbd}/agents/$package/\"
    "

    ${TE_BASE}/engine/builder/te_configure_package TA "$package" "$package" \
        "${sbd}/agents/$package" "$PLATFORM" "$PKGSRC" "$PREFIX" || exit 1

    local TE_CFLAGS_NAME="${package}_CFLAGS_VAR"
    local TE_CPPFLAGS_NAME="${package}_CPPFLAGS_VAR"
# Code "echo=echo" was added, for bug fixing of a look "X--tag=CC: command not found"
# See https://lists.gnu.org/archive/html/bug-libtool/2008-04/msg00011.html
    te_eval_or_ssh "${PLATFORM}" "
        cd ${sbd}/agents/$package || exit 1
        echo=echo \\
        TE_CFLAGS_VAR='${!TE_CFLAGS_NAME}' \\
        TE_CPPFLAGS_VAR='${!TE_CPPFLAGS_NAME}' \\
        make ${BUILD_MAKEFLAGS} install || exit 1
    "
    res=$?; if test "$res" -ne "0" ; then exit $res; fi

    local pexts="TE_BS_TA_APPS_${package}"
    local pext

    for pext in ${!pexts}; do
         local pextsrc="TE_BS_TA_APPS_${package}_${pext}_SOURCES"
         local pextprep="TE_BS_TA_APPS_${package}_${pext}_PREPARE"
         local pextbuilddir="TE_BS_TA_APPS_${package}_${pext}_BUILDDIR"
         local pextbuild="TE_BS_TA_APPS_${package}_${pext}_BUILD"
         local pextlibs="TE_BS_TA_APPS_${package}_${pext}_LIBS"
         local pextinstb="TE_BS_TA_APPS_${package}_${pext}_INSTALL_BIN"
         local pextenv="TE_BS_TA_APPS_${package}_${pext}_ENV_VARS"
         build_extension "$PLATFORM" "${!pextsrc}" "${!pextprep}" \
                         "${!pextbuilddir/#${TE_BUILD}/${sbd}}" \
                         "${!pextbuild}" "${!pextlibs}" \
                         "" "" "${!pextinstb}" "${package}" "${!pextenv}" || exit 1
    done
}

print_platform() {
    local HOSTVAR="${1}_HOST"
    local HOST=${!HOSTVAR}
    echo "${1}${HOST:+ on }${HOST}"
}

print_agent_log_files() {
    echo "$(readlink -f "$1").{1,2}.log"
}

print_build_agent_start() {
    echo "Build agent $(print_platform $1) - start"
    echo "  location of log files: $(print_agent_log_files "$p")"
}

add_timestamps() {
    gawk -vHEADER="$1" '{
        print strftime("%F %T"), HEADER ":", $0
        fflush()
    }'
}

print_without_timestamps() {
    tail -f -c +1 --pid=$2 "$1" |
        sed -u 's/^[^ ]* [^ ]* [^ ]* //'
}

# Acquire shadow build directory on agent and TE host.
acquire_shadow_build_directory() {
    local res

    # get or create new name of shadow build directory
    if test ! -f "${p}.sbd"; then
        te_eval_or_ssh "${p}" "mktemp -d -u" >"${p}.sbd"
    fi
    local sbd=$(cat "${p}.sbd")

    # recreate SBD on TE host
    test -d "${sbd}" && rm -rf "${sbd}"
    mkdir -p "${sbd}" || exit 1

    # make sure that the SBD on TE host and on agent host are different directories
    local temp_file="$(mktemp "${sbd}/XXXXXXXX")"
    te_eval_or_ssh "${p}" "test -f '$temp_file'"
    if test "$?" -eq "0"; then
        rm -f "${p}.sbd"
        rm -rf "${sbd}"
        return # this is normal situation, build without SBD
    fi
    rm -f "$temp_file"

    # distribute files from TE_BUILD to the SBD on both hosts
    te_eval_or_ssh "${p}" "
        test -d '${sbd}' && rm -rf '${sbd}'
        mkdir -p '${sbd}/platforms/${p}' || exit 1
        mkdir -p '${sbd}/agents/${p}' || exit 1
        mkdir -p '${sbd}/apps/${p}' || exit 1
    "
    res=$?; if test "$res" -ne "0" ; then exit $res; fi
    for type in platforms agents apps; do
        mkdir -p "${sbd}/${type}/${p}" || exit 1
        test -d "${type}/${p}" || continue
        cp -rp "${type}/${p}" "${sbd}/${type}"
        tar -C "${type}/${p}" -czf - . |
            te_eval_or_ssh "${p}" "
                tar -C '${sbd}/${type}/${p}' -xzf -
            "
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done
}

# Release shadow build directory on agent and TE host.
release_shadow_build_directory() {
    local res

    if test ! -f "${p}.sbd"; then
        return
    fi
    local sbd=$(cat "${p}.sbd")

    # remove files from the SBD on TE host
    rm -rf "${sbd}" || exit 1

    # cleanup TE_BUILD
    rm -rf "platforms/${p}"
    rm -rf "agents/${p}"
    rm -rf "apps/${p}"

    # return files from the SBD on agent host
    te_eval_or_ssh "${p}" "
        tar -C '${sbd}' -czf - platforms/${p} agents/${p} apps/${p}
        rm -rf '${sbd}' >/dev/null
    " | tar -xzf -
    res=$?; if test "$res" -ne "0" ; then exit $res; fi
    find . -type l | xargs ${TE_BASE}/engine/builder/te_fixlink "${sbd}" .
}

build_platform_and_agent() {
    local p=$1
    local mode=$2

    if test "$p" = "${TE_HOST}" ; then return ; fi
    if test -n "${CONSTRUCTED[$p]}" ; then return ; fi
    local AGENT_EXIST=$(te_is_in_list $p $DUMMY $TE_BS_TA \
        && echo yes || echo no)
    if ! need_build_platform "$p" "$mode" && \
        ( test "$AGENT_EXIST" = "no" || \
        ! need_build_agent "$p" "$mode" ) ; then
        return
    fi
    print_build_agent_start "$p" >&2
    (
        local plocalbuild="TE_BS_TA_${p}_LOCAL_BUILD"
        local res

        if test "${!plocalbuild}" = "local"; then
            local pplatform="TE_BS_TA_${p}_PLATFORM"
            declare "${!pplatform}_SSH"=""
        fi
        acquire_shadow_build_directory
        (
            build_platform "$p" "$mode" || mode=all
            if test "$AGENT_EXIST" = "yes" ; then
                build_agent "$p" "$mode"
            fi
        )
        res=$?
        release_shadow_build_directory
        exit $res
    ) 2> >( add_timestamps stderr >$p.2.log ) \
      1> >( add_timestamps stdout >$p.1.log ) &
    PIDS[$!]="$p"
    CONSTRUCTED[$p]=yes
}

build() {
    declare -A ERRORS
    declare -A PIDS
    declare -A CONSTRUCTED

    for ta in ${BUILD_TA_FOR} ; do
        local TA_TYPE="$(te_hostname2shname "${ta}_TA_TYPE")"
        local p=${!TA_TYPE}
        if test -z "$p" ; then
            echo "Unknown hostname (--build-ta-for=$ta)" >&2
            exit 1
        fi
        build_platform_and_agent "$p" all
    done

    if test -n "${BUILD_TA}" ; then
        for p in ${TE_BS_PLATFORMS} ; do
            build_platform_and_agent "$p" "$BUILD_TA"
        done
    fi

    for pid in "${!PIDS[@]}"; do
        local p="${PIDS[$pid]}"

        print_without_timestamps "$p.2.log" "$pid" >&2 &
        local ppid="$!"

        wait "$pid"
        local res="$?"

        wait "$ppid"

        if test "$res" = "0" ; then
            echo "Build agent $(print_platform $p) - pass" >&2
        else
            echo "Build agent $(print_platform $p) - fail ($res)" >&2
            ERRORS[$p]=$res
        fi
    done

    if test "${#ERRORS[@]}" -ne "0" ; then
        echo "Build failed. For more details see files:"
        for p in "${!ERRORS[@]}"; do
            echo "  $(print_agent_log_files "$p")"
        done

        # Returns the last value of an array (last error)
        exit "${ERRORS[@]:(-1)}"
    fi

    if test -n "${BUILD_TA}" ; then
        for package in $DUMMY $TE_BS_TA ; do
            if test -n "${CONSTRUCTED[$package]}" ; then continue ; fi
            build_agent "$package" "$BUILD_TA"
        done
    fi
}

build

exit 0
