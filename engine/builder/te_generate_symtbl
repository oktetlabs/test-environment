#! /bin/bash
#
# Test Environment Builder
#
# Script for symbol table generation.
#
# Usage: builder_generate_symtbl "$(NM)" 
#                                <file with names of additional variables> \
#                                <file with names of additional functions> \
#                                <out C file name> <list of TA objects>
#
# List of TA object may contain libraryies as well.
# If no additional variables/functions should be in symbol table 
# use "empty" instead of corresponding file names.
#
# Copyright (C) 2003 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
#
# $Id$
#

NM=$1
ADD_VARS=$2
ADD_FUNCS=$3
RESULT=$4
shift 4

te_bs_symtbl_tmp=$RESULT.tmp

rm -f $te_bs_symtbl_tmp
if [ "x${NM_FORMAT}" = "x" ] ; then
    NM_FORMAT=bsd
fi

if [ "x${NM_FORMAT}" = "xbsd" ] ; then
    $NM --demangle --format=${NM_FORMAT} --extern-only --defined-only $* \
        >> $te_bs_symtbl_tmp
elif [ "x${NM_FORMAT}" = "xsysv" ] ; then
    $NM --demangle --format=${NM_FORMAT} --extern-only --defined-only $* \
        | grep ".*|.*|.*|.*|.*|.*|" | sed "s/|/ | /g" >> $te_bs_symtbl_tmp
else
    echo "nm format ${NM_FORMAT} is not supported"
    exit 1
fi

cat > $RESULT <<\EOF
/*
 * This file is automatically generated by program te_generate_symtbl.
 * DO NOT EDIT IT!!!
 *
EOF

echo ' * File generated at' `date` >> $RESULT
cat >> $RESULT <<\EOF
 */

#include "te_config.h"

#if HAVE_CONFIG_H
#include "config.h"
#endif

#if STDC_HEADERS
#include <string.h>
#else
#if HAVE_STRING_H
#include <string.h>
#endif
#if HAVE_STRINGS_H
#include <strings.h>
#endif
#endif

EOF

# This searches for symbols in table produced by nm
# tool. There are three columns, the first one is symbol
# value which aren't used here, the second one ($2) is
# symbol type (we are interested only in 'T' type which
# means that symbol is from code section). In the third
# column ($3) symbol name is placed. We filter out
# symbols with names including '@' such as
# "printf@@GLIBC_2.2.5".
#
# __i686.get_pc_thunk.* are used to obtain things like
# address of Global Offset Table (where addresses of
# global variables are stored) in position independent
# code on x86 platform. They should be filtered out to
# create correct symbol table for TA.

if [ "x${NM_FORMAT}" = "xbsd" ] ; then
    var_num=3
    type_num=2
    type_val=T
else
    var_num=1
    type_num=7
    type_val=FUNC
fi

awk --posix "
{                                                       \
    if (\$$var_num == \"\") next ;                      \
    if (\$$var_num == \"__i686.get_pc_thunk.bx\") next; \
    if (\$$var_num == \"__i686.get_pc_thunk.cx\") next; \
    if (\$$type_num == \"W\") next ;                    \
    if (match(\$$var_num, \"@\") != 0) next;            \
    if (\$$type_num != \"$type_val\")                   \
        printf(\"extern int %s;\n\", \$$var_num) ;      \
    else                                                \
        printf(\"extern int %s();\n\", \$$var_num);     \
} " $te_bs_symtbl_tmp >> $RESULT


if ! test ${ADD_VARS} = empty ; then
    for i in `cat ${ADD_VARS}` ; do
        echo "extern int "$i";" >> $RESULT
    done
fi    

if ! test ${ADD_FUNCS} = empty ; then
    for i in `cat ${ADD_FUNCS}` ; do
        echo "extern int "$i"();" >> $RESULT
    done
fi    

cat >> $RESULT <<\EOF

static struct {
    char *name;
    int   is_func;
    void *addr;
} ta_symbol_table[] = {
EOF

awk --posix "
{                                                               \
    if (\$$var_num == \"\") next ;                              \
    if (\$$var_num == \"__i686.get_pc_thunk.bx\") next;         \
    if (\$$var_num == \"__i686.get_pc_thunk.cx\") next;         \
    if (match(\$$var_num, \"@\") != 0) next;                    \
    if (\$$type_num == \"W\") next ;                            \
    if (\$$type_num != \"$type_val\")                           \
        printf(\"    { \\\"%s\\\", 0, &%s },\\n\",              \
               \$$var_num, \$$var_num);                         \
    else                                                        \
        printf(\"    { \\\"%s\\\", 1, %s },\\n\",               \
               \$$var_num, \$$var_num);                         \
} " $te_bs_symtbl_tmp >> $RESULT

if ! test ${ADD_VARS} = empty ; then
    for i in `cat ${ADD_VARS}` ; do
        echo "    { "$i", 0, &"$i" }," >> $RESULT
    done
fi    

if ! test ${ADD_FUNCS} = empty ; then
    for i in `cat ${ADD_FUNCS}` ; do
        echo "    { \""$i"\", 1, "$i" }," >> $RESULT
    done
fi    

cat >> $RESULT <<\EOF
    { "", 0, (void *)0 }
};

void *
rcf_ch_symbol_addr_auto(const char *name, int is_func)
{
    unsigned int i;

    if (name == (void *)0)
        return (void *)0;

    for (i = 0;
         i < sizeof(ta_symbol_table)/sizeof(ta_symbol_table[0]);
         i++)
        if (strcmp(name, ta_symbol_table[i].name) == 0 &&
            ta_symbol_table[i].is_func == is_func)
            return ta_symbol_table[i].addr;

    return (void *)0;
}

char *
rcf_ch_symbol_name_auto(const void *addr)
{
    unsigned int i;

    if (addr == (void *)0)
        return (void *)0;

    for (i = 0;
         i < sizeof(ta_symbol_table)/sizeof(ta_symbol_table[0]);
         i++)
        if (addr == ta_symbol_table[i].addr)
            return ta_symbol_table[i].name;

    return (void *)0;
}
EOF

rm -f $te_bs_symtbl_tmp
