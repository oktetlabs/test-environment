#! /bin/sh
#
# Test Environment Builder
#
# Script for symbol table generation.
#
# Usage: builder_generate_symtbl "$(NM)" 
#                                <file with names of additional variables> \
#                                <file with names of additional functions> \
#                                <out C file name> <list of TA objects>
#
# List of TA object may contain libraryies as well.
# If no additional variables/functions should be in symbol table 
# use "empty" instead of corresponding file names.
#
# Copyright (C) 2003 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
#
# $Id$
#

NM=$1
ADD_VARS=$2
ADD_FUNCS=$3
RESULT=$4
shift 4

rm -f te_bs_symtbl.tmp
$NM --demangle --format=bsd --extern-only --defined-only $* \
    >> te_bs_symtbl.tmp

cat > $RESULT <<\EOF
/*
 * This file is automatically generated by program te_generate_symtbl.
 * DO NOT EDIT IT!!!
 *
EOF

echo ' * File generated at' `date` >> $RESULT
cat >> $RESULT <<\EOF
 */

#include "te_config.h"

#if HAVE_CONFIG_H
#include "config.h"
#endif

#if STDC_HEADERS
#include <string.h>
#else
#if HAVE_STRING_H
#include <string.h>
#endif
#if HAVE_STRINGS_H
#include <strings.h>
#endif
#endif

EOF

awk --posix '
{                                         \
    if ($3 == "") next ;                  \
    if (match($3, "@") != 0) next;        \
    if ($2 != "T")                        \
        printf("extern int %s;\n", $3) ;  \
    else                                  \
        printf("extern int %s();\n", $3); \
} ' te_bs_symtbl.tmp >> $RESULT

if ! test ${ADD_VARS} = empty ; then
    for i in `cat ${ADD_VARS}` ; do
        echo "extern int "$i";" >> $RESULT
    done
fi    

if ! test ${ADD_FUNCS} = empty ; then
    for i in `cat ${ADD_FUNCS}` ; do
        echo "extern int "$i"();" >> $RESULT
    done
fi    

cat >> $RESULT <<\EOF

static struct {
    char *name;
    int   is_func;
    void *addr;
} ta_symbol_table[] = {
EOF

awk --posix '
{                                                    \
    if ($3 == "") next ;                             \
    if (match($3, "@") != 0) next;                   \
    if ($2 != "T")                                   \
        printf("    { \"%s\", 0, &%s },\n", $3, $3); \
    else                                             \
        printf("    { \"%s\", 1, %s },\n", $3, $3);  \
} ' te_bs_symtbl.tmp >> $RESULT

if ! test ${ADD_VARS} = empty ; then
    for i in `cat ${ADD_VARS}` ; do
        echo "    { "$i", 0, &"$i" }," >> $RESULT
    done
fi    

if ! test ${ADD_FUNCS} = empty ; then
    for i in `cat ${ADD_FUNCS}` ; do
        echo "    { \""$i"\", 1, "$i" }," >> $RESULT
    done
fi    

cat >> $RESULT <<\EOF
    { "", 0, (void *)0 }
};

void *
rcf_ch_symbol_addr_auto(const char *name, int is_func)
{
    unsigned int i;

    if (name == (void *)0)
        return (void *)0;

    for (i = 0;
         i < sizeof(ta_symbol_table)/sizeof(ta_symbol_table[0]);
         i++)
        if (strcmp(name, ta_symbol_table[i].name) == 0 &&
            ta_symbol_table[i].is_func == is_func)
            return ta_symbol_table[i].addr;

    return (void *)0;
}

char *
rcf_ch_symbol_name_auto(const void *addr)
{
    unsigned int i;

    if (addr == (void *)0)
        return (void *)0;

    for (i = 0;
         i < sizeof(ta_symbol_table)/sizeof(ta_symbol_table[0]);
         i++)
        if (addr == ta_symbol_table[i].addr)
            return ta_symbol_table[i].name;

    return (void *)0;
}
EOF

rm -f te_bs_symtbl.tmp
