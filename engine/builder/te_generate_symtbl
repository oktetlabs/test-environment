#! /bin/sh

# Test Environment
#
# Script for symbol table generation.
#
# Usage: builder_generate_symtbl "$(NM)" <out C file name> <list of TA objects> 
#
# List of TA object may contain libraryies as well.
#
# Copyright (C) 2003 Test Environment authors (see file AUTHORS in the 
# root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
# 
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA  02111-1307  USA
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
# 
# $Id$

NM=$1
RESULT=$2
shift 2

rm -f te_bs_symtbl.tmp
$NM --demangle --format=bsd --extern-only --defined-only $* \
    >> te_bs_symtbl.tmp

cat > $RESULT <<\EOF
/*
 * This file is automatically generated by program builder_generate_symtbl.
 * DO NOT EDIT IT!!!
 *
EOF

echo ' * File generated at' `date` >> $RESULT 
echo ' */' >> $RESULT

echo >> $RESULT

awk --posix '
/^[[:xdigit:]]{8} B|C|D|G|S/ { if ($3 == "") next ; printf "extern int %s;\n", $3 ; next ;}
/^[[:xdigit:]]{8} T/ { if ($3 == "") next ; printf "extern int %s();\n", $3 ; next ;}
/^[[:xdigit:]]{16} B|C|D|G|S/ { if ($3 == "") next ; printf "extern int %s;\n", $3 ; next ;}
/^[[:xdigit:]]{16} T/ { if ($3 == "") next ; printf "extern int %s();\n", $3 ; next ;}
' te_bs_symtbl.tmp >> $RESULT


cat >> $RESULT <<\EOF

static struct { 
    char *name;
    int   is_func;
    void *addr;
} ta_symbol_table[] = {
EOF

awk --posix '
/^[[:xdigit:]]{8} C|D|B/ { if ($3 == "") next ; printf "    { \"%s\", 0, &%s },\n", $3, $3 ; next ;}
/^[[:xdigit:]]{8} T/ { if ($3 == "") next ; printf "    { \"%s\", 1, %s },\n", $3, $3 ; next ;}
/^[[:xdigit:]]{16} C|D|B/ { if ($3 == "") next ; printf "    { \"%s\", 0, &%s },\n", $3, $3 ; next ;}
/^[[:xdigit:]]{16} T/ { if ($3 == "") next ; printf "    { \"%s\", 1, %s },\n", $3, $3 ; next ;}
' te_bs_symtbl.tmp >> $RESULT

cat >> $RESULT <<\EOF
    { "", 0, (void *)0 }
};

void *
rcf_ch_symbol_addr_auto(const char *name, int is_func)
{
    int i;
    
    if (name == (void *)0)
        return (void *)0;
    
    for (i = 0; 
         i < sizeof(ta_symbol_table)/(2 * sizeof(void *) + sizeof(int)) ; 
         i++)
        if (strcmp(name, ta_symbol_table[i].name) == 0 && 
            ta_symbol_table[i].is_func == is_func)
            return ta_symbol_table[i].addr;
            
    return (void *)0;
}

char *
rcf_ch_symbol_name_auto(const void *addr)
{
    int i;
    
    if (addr == (void *)0)
        return (void *)0;
    
    for (i = 0; 
         i < sizeof(ta_symbol_table)/(2 * sizeof(void *) + sizeof(int)) ; 
         i++)
        if (addr == ta_symbol_table[i].addr)
            return ta_symbol_table[i].name;
            
    return (void *)0;
}
EOF

rm -f te_bs_symtbl.tmp
