#! /bin/bash
# SPDX-License-Identifier: Apache-2.0
#
# RPC support
# Common constructions to be used in meson.build's related to RPCs
#
# Copyright (C) 2004-2022 OKTET Labs Ltd. All rights reserved.

set -eo pipefail

te_rpcgen_help() {
	cat >&2 <<- END_OF_HELP
	usage: $(basename $0) [-h hdr.h] [-x xdr.c] [-t rpctbl.c] [-s stub.c] rpc.x

	Generate RPC header/sources from RPC definitions file.

	END_OF_HELP
}

# Unfortunately backslash+newline does not work inside sed scripts,
# and in Makefile actions there is no way to insert a plain newline,
# so this and the following effectively must be fit into into a single line.

# What is done here:
# - pthread.h header is eliminated
# - all define's generated by rpcgen are also eliminated
te_rpcgen_h() {
	rpcgen -M -h $1 | sed '/^[ \t]*#[ \t]*include[ \t]\+<pthread.h>/d; /^[ \t]*#[ \t]*define[ \t]\+\w\+[ \t]\+[0-9]\+[ \t]*$/d'
}

te_rpcgen_xdr() {
	rpcgen -M -c $1 | sed '1i#include "config.h"' |
		sed 's,<rpc/rpc.h>,"tarpc.h",' | sed 's,"lib/rpcxdr/tarpc.h","tarpc.h",'
}

# What is done here:
# - after a pack of header inclusions
# - for each declared RPC entry point, the following record is constructed:
#   + name
#   + pointer to server-side implementation or NULL for client side
#   + encode/decode XDR routines for RPC in/out arguments
#   + sizes for input and output argument structures
te_rpcgen_rpctbl() {
	echo '#include "config.h"'
	echo '#include <te_defs.h>'
	echo '#include "rpc_xdr.h"'
	echo '#include "tarpc.h"'
	echo "rpc_info $(basename "${1%.*}")_functions[] = {"
	sed -n '/^[ \t]*version/,/^[ \t]*}/s/^[ \t]*\(\w\+\)[ \t]*_\(\w\+\)(\(\w\+\)[ \t]*\*)[ \t]*=[ \t]*[0-9]\+;[ \t]*$/{"\2", \n#ifdef TE_RPC_CLIENT\nNULL,\n#else\n(rpc_func)_\2_1_svc,\n#endif\n (rpc_arg_func)xdr_\3, sizeof(\3), (rpc_arg_func)xdr_\1, sizeof(\1)},/p' $1
	echo '{ NULL, NULL, NULL, 0, NULL, 0 }};'
}

# What is done here:
# - after a pack of header inclusions
# - for each declared RPC entry point, the following record is constructed:
#   + name
#   + pointer to server-side implementation or NULL for client side
#   + encode/decode XDR routines for RPC in/out arguments
#   + sizes for input and output argument structures
te_rpcgen_stub() {
	echo '#include "config.h"'
	echo '#include <stddef.h>'
	echo '#include <te_defs.h>'
	echo '#include "rpc_xdr.h"'
	echo '#include "tarpc.h"'
	echo 'extern void tarpc_call_unsupported(const char *name, void *out, size_t outsize, size_t common_offset);'
	sed -n '/^[ \t]*version/,/^[ \t]*}/s/^[ \t]*\(\w\+\)[ \t]*_\(\w\+\)(\(\w\+\)[ \t]*\*)[ \t]*=[ \t]*[0-9]\+;[ \t]*$/__attribute__ ((weak)) bool_t _\2_1_svc(\3 *in, \1 *out,  struct svc_req *rqstp) { UNUSED(in); UNUSED(rqstp); tarpc_call_unsupported("\2", \&out->common, sizeof(*out), offsetof(\1, common)); return TRUE; }/p' $1
}

header=
xdr=
rpctbl=
stub=

while getopts Hh:x:t:s: ARG ; do
	case $ARG in
		h) header="${OPTARG}" ;;
		x) xdr="${OPTARG}" ;;
		t) rpctbl="${OPTARG}" ;;
		s) stub="${OPTARG}" ;;
		H) te_rpcgen_help ; exit 0 ;;
		?) te_rpcgen_help ; exit 1 ;;
	esac
done
shift $(($OPTIND - 1))
x="$1"

test -z "${header}" || te_rpcgen_h "${x}" >"${header}"
test -z "${xdr}" || te_rpcgen_xdr "${x}" >"${xdr}"
test -z "${rpctbl}" || te_rpcgen_rpctbl "${x}" >"${rpctbl}"
test -z "${stub}" || te_rpcgen_stub "${x}" >"${stub}"
