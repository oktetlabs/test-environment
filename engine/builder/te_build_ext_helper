#!/bin/bash
#
# Test Environment Builder
#
# A helper to call te_build_ext based on builder.conf data
# Essentially a stripped-down version of te_cross_build
#
# Copyright (C) 2003-2018 OKTET Labs.
#
# @author Artem V. Andreev <Artem.Andreev@oktetlabs.ru>
#


. ${TE_BUILD}/builder.conf.processed

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/te_functions

set -e

for arg; do
    case "$arg" in
        --prefix=*)
            PREFIX="${arg#--prefix=}"
            ;;
        --platform=*)
            PLATFORM="${arg#--platform=}"
            ;;
        --tatype=*)
            TATYPE="${arg#--tatype=}"
            ;;
        --mode=*)
            MODE="${arg#--mode=}"
            ;;
        *)
            echo "Invalid option '$arg'" >&2
            exit 1
            ;;
    esac
done

case "$MODE" in
    lib)
        if test -z "$PLATFORM"; then
            echo "No platform specified" >&2
            exit 1
        fi
        PACKAGE="$PLATFORM"
        PFX=EXT
    ;;
    app)
        if test -z "$TATYPE"; then
            echo "No agent type specified" >&2
            exit 1
        fi
        if test "$TATYPE" = default; then
            PLATFORM=default
        elif test -z "$PLATFORM"; then
            pplatform="TE_BS_TA_${TATYPE}_PLATFORM"
            PLATFORM="${!pplatform}"
        fi
        PACKAGE="$TATYPE"
        PFX=TA_APPS
    ;;
    *)
        echo "Invalid mode '$mode'" >&2
        exit 1
        ;;
esac

pexts="TE_BS_${PFX}_${PACKAGE}"

function construct_include_subdirs()
{
    local teincludes=""
    local telib

    for telib in $1; do
        local plibsrc="TE_BS_LIB_${PLATFORM}_${telib}_SOURCES"
        local libsrc="${!plibsrc}"
        # We assume that if a library is built several times, it may have
        # a separate include subdirectory for each 'non-default' build
        if test -n "$libsrc" -a "$libsrc" != "${TE_BASE}/lib/${telib}"; then
            echo "{$telib}"
        fi
    done
}

for pext in ${!pexts}; do
    pextsrc="TE_BS_${PFX}_${PACKAGE}_${pext}_SOURCES"
    pextprep="TE_BS_${PFX}_${PACKAGE}_${pext}_PREPARE"
    pextbuilddir="TE_BS_${PFX}_${PACKAGE}_${pext}_BUILDDIR"
    pextbuild="TE_BS_${PFX}_${PACKAGE}_${pext}_BUILD"
    pextlibs="TE_BS_${PFX}_${PACKAGE}_${pext}_LIBS"
    pextinstb="TE_BS_${PFX}_${PACKAGE}_${pext}_INSTALL_BIN"
    pextinsth="TE_BS_${PFX}_${PACKAGE}_${pext}_INSTALL_HEADERS"
    pextinstl="TE_BS_${PFX}_${PACKAGE}_${pext}_INSTALL_LIBS"
    pextenv="TE_BS_${PFX}_${PACKAGE}_${pext}_ENV_VARS"

    teincludes="$(construct_include_subdirs "${!pextlibs}")"

    if te_check_tce "${PLATFORM}" "${pext}"; then
        enable_tce="--tce"
    else
        enable_tce=""
    fi
    "${SCRIPT_DIR}"/te_build_ext --prefix="${PREFIX}" \
                 --platform="${PLATFORM}" --srcdir="${!pextsrc}" \
                 --prepare="${!pextprep}" \
                 --builddir="${!pextbuilddir}" \
                 --build="${!pextbuild}" \
                 --telibs="${!pextlibs}" \
                 --includes="${teincludes}" \
                 --expheaders="${!pextinsth}" \
                 --explibs="${!pextinstl}" \
                 --expbin="${!pextinstb}" \
                 --tatype="${PACKAGE}" \
                 --envvars="${!pextenv}" $enable_tce || exit 1
done
