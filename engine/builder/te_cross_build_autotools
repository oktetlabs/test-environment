#! /bin/bash
#
# Test Environment Builder
#
# Script for building of cross packages using autotools.
#
# Copyright (C) 2003-2020 OKTET Labs.
#
# Author Elena A. Vengerova <Elena.Vengerova@oktetlabs.ru>
#

. ${TE_BUILD}/builder.conf.processed

SCRIPT_DIR=`dirname $0`
. ${SCRIPT_DIR}/te_functions

PREFIX=$1 ; shift
DUMMY=

##
# Check the ability to create files in the given directory
#
# @param platform signature
# @param directory for check
#
# @par Scenario:
#
# -# Create a file and check the result
# -# Check that the file exists
# -# Remove the file and check the result
#
# Note: if any operation fails the script execution will be interrupted
#
fs_sanity_check() {
    local iseval=true
    te_eval_or_ssh "$1" "
        test -n \"\$iseval\" && return 0
        set -e
        fname=\"\$(mktemp \"$2/XXXXXX\")\"
        test -f \"\$fname\"
        rm \"\$fname\"
    "
    if test "$?" -ne "0" ; then
        echo "nfs sanity check fail ($2)" >&2
        exit 1
    fi
}

need_build_agent() {
    local package=$1
    local mode=$2

    local pplatform="TE_BS_TA_${package}_PLATFORM"
    PLATFORM="${!pplatform}"
    if test "$PLATFORM" = "${TE_HOST}" ; then return 1 ; fi ;
    if test "$mode" != "all" -a -f agents/$package/ta ; then
        return 1
    fi
    return 0
}

need_build_platform() {
    local p=$1
    local mode=$2

    if test "$mode" = "all" -o \
        ! -f platforms/${p}/include/Makefile ; then
        return 0
    fi

    local plibs="${p}_LIBS"
    LIBS="${!plibs}"
    for package in $LIBS ; do
        if test "$mode" = "all" -o \
            ! -f platforms/${p}/lib/$package/Makefile ; then
            return 0
        fi
    done

    for package in $DUMMY $TE_BS_TA ; do
        local ta_platform="TE_BS_TA_${package}_PLATFORM"

        test "${!ta_platform}" = "$p" || continue

        need_build_agent "$package" "$mode" && return 0
    done

    return 1
}

build_platform() {
    local res
    local p=$1
    local mode=$2

    local sbd=${TE_BUILD}
    if test -f "${p}.sbd"; then
        sbd=$(cat "${p}.sbd")
    fi

    mkdir -p "platforms/${p}"
    fs_sanity_check "${p}" "platforms/${p}"
    if test "$mode" = "all" -o \
            ! -f ${sbd}/platforms/${p}/include/Makefile ; then
        local pexts="TE_BS_EXT_${p}"
        local pext

        for pext in ${!pexts}; do
             local pextsrc="TE_BS_EXT_${p}_${pext}_SOURCES"
             local pextprep="TE_BS_EXT_${p}_${pext}_PREPARE"
             local pextbuilddir="TE_BS_EXT_${p}_${pext}_BUILDDIR"
             local pextbuild="TE_BS_EXT_${p}_${pext}_BUILD"
             local pextinsth="TE_BS_EXT_${p}_${pext}_INSTALL_HEADERS"
             local pextinstl="TE_BS_EXT_${p}_${pext}_INSTALL_LIBS"
             local pextenv="TE_BS_EXT_${p}_${pext}_ENV_VARS"
             local enable_tce=""

             te_check_tce "${p}" "${pext}" && enable_tce="--tce"
             ${SCRIPT_DIR}/te_build_ext --prefix="$PREFIX" \
                          --platform="$p" --srcdir="${!pextsrc}" \
                          --prepare="${!pextprep}" \
                          --builddir="${!pextbuilddir/#${TE_BUILD}/${sbd}}" \
                          --build="${!pextbuild}" \
                          --expheaders="${!pextinsth}" \
                          --explibs="${!pextinstl}" \
                          --envvars="${!pextenv}" $enable_tce || exit 1
        done

        ${TE_BASE}/engine/builder/te_configure_package INCLUDE include \
            "${p}_include" "${sbd}/platforms/${p}/include" \
            "$p" "${TE_BASE}/include" "$PREFIX" || exit 1
    fi

    local libs=
    local plibs="${p}_LIBS"
    LIBS="${!plibs}"
    for package in $LIBS ; do
        PKGNAME=${p}_$package
        local ppkgsrc="TE_BS_LIB_${PKGNAME}_SOURCES"
        PKGSRC="${!ppkgsrc}"
        if test -z "$PKGSRC" ; then
            PKGSRC=${TE_BASE}/lib/$package ;
        fi
        if test "$mode" = "all" -o \
            ! -f ${sbd}/platforms/${p}/lib/$package/Makefile ; then
            ${TE_BASE}/engine/builder/te_configure_package LIB "$package" \
                "${p}_$package" "${sbd}/platforms/${p}/lib/$package" \
                "$p" "$PKGSRC" "$PREFIX" || exit 1
            libs="$libs $package"
        fi
    done

    local TE_CFLAGS_NAME="${p}_CFLAGS_VAR"
    local TE_CPPFLAGS_NAME="${p}_CPPFLAGS_VAR"
    for package in $libs ; do
# Code "echo=echo" was added, for bug fixing of a look "X--tag=CC: command not found"
# See https://lists.gnu.org/archive/html/bug-libtool/2008-04/msg00011.html
        te_eval_or_ssh "${p}" "
            pushd ${sbd}/platforms/${p}/lib/$package >/dev/null
            echo=echo \\
            TE_CFLAGS_VAR='${!TE_CFLAGS_NAME}' \\
            TE_CPPFLAGS_VAR='${!TE_CPPFLAGS_NAME}' \\
            make ${BUILD_MAKEFLAGS} install || exit 1
            popd >/dev/null
        "
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done
    test -z "$libs"
}

build_agent() {
    local res
    local package=$1
    local mode=$2

    local pplatform="TE_BS_TA_${package}_PLATFORM"
    PLATFORM="${!pplatform}"
    if test "$PLATFORM" = "${TE_HOST}" ; then return 0 ; fi ;

    local sbd=${TE_BUILD}
    if test -f "${PLATFORM}.sbd"; then
        sbd=$(cat "${PLATFORM}.sbd")
    fi

    local ppkgsrc="TE_BS_TA_${package}_SOURCES"
    PKGSRC="${!ppkgsrc}"
    if test -z "$PKGSRC" ; then
        PKGSRC=${TE_BASE}/agents/$package ;
    fi
    if test "$mode" != "all" -a -f agents/$package/ta ; then
        return 0
    fi
    mkdir -p "agents/$package"
    fs_sanity_check "${PLATFORM}" "agents/$package"

    te_eval_or_ssh "${PLATFORM}" "
        mkdir -p \"${sbd}/agents/$package\"
        ${TE_BASE}/engine/builder/te_rcf_consistency_checks \
            --extfiles-del \"${sbd}/agents/$package/\"
        echo \"$TE_RCF_CONSISTENCY_CHECKS_EXT_FILES\" |
            ${TE_BASE}/engine/builder/te_rcf_consistency_checks \
                --extfiles-add \"${sbd}/agents/$package/\"
    "

    ${TE_BASE}/engine/builder/te_configure_package TA "$package" "$package" \
        "${sbd}/agents/$package" "$PLATFORM" "$PKGSRC" "$PREFIX" || exit 1

    local TE_CFLAGS_NAME="${package}_CFLAGS_VAR"
    local TE_CPPFLAGS_NAME="${package}_CPPFLAGS_VAR"
# Code "echo=echo" was added, for bug fixing of a look "X--tag=CC: command not found"
# See https://lists.gnu.org/archive/html/bug-libtool/2008-04/msg00011.html
    te_eval_or_ssh "${PLATFORM}" "
        cd ${sbd}/agents/$package || exit 1
        echo=echo \\
        TE_CFLAGS_VAR='${!TE_CFLAGS_NAME}' \\
        TE_CPPFLAGS_VAR='${!TE_CPPFLAGS_NAME}' \\
        make ${BUILD_MAKEFLAGS} install || exit 1
    "
    res=$?; if test "$res" -ne "0" ; then exit $res; fi

    local pexts="TE_BS_TA_APPS_${package}"
    local pext

    for pext in ${!pexts}; do
         local pextsrc="TE_BS_TA_APPS_${package}_${pext}_SOURCES"
         local pextprep="TE_BS_TA_APPS_${package}_${pext}_PREPARE"
         local pextbuilddir="TE_BS_TA_APPS_${package}_${pext}_BUILDDIR"
         local pextbuild="TE_BS_TA_APPS_${package}_${pext}_BUILD"
         local pextlibs="TE_BS_TA_APPS_${package}_${pext}_LIBS"
         local pextinstb="TE_BS_TA_APPS_${package}_${pext}_INSTALL_BIN"
         local pextenv="TE_BS_TA_APPS_${package}_${pext}_ENV_VARS"
         local enable_tce=""

         local teincludes=""
         local telib
         for telib in ${!pextlibs}; do
             local plibsrc="TE_BS_LIB_${PLATFORM}_${telib}_SOURCES"
             local libsrc="${!plibsrc}"
             # We assume that if a library is built several times, it may have
             # a separate include subdirectory for each 'non-default' build
             if test -n "$libsrc" -a "$libsrc" != "${TE_BASE}/lib/${telib}"; then
                 teincludes="${teincludes} ${telib}"
             fi
         done
         te_check_tce "${PLATFORM}" "${pext}" && enable_tce="--tce"

         ${SCRIPT_DIR}/te_build_ext --prefix="$PREFIX" \
                      --platform="$PLATFORM" --srcdir="${!pextsrc}" \
                      --prepare="${!pextprep}" \
                      --builddir="${!pextbuilddir/#${TE_BUILD}/${sbd}}" \
                      --build="${!pextbuild}" --telibs="${!pextlibs}" \
                      --includes="${teincludes}" \
                      --expbin="${!pextinstb}" \
                      --tatype="${package}" \
                      --envvars="${!pextenv}" ${enable_tce} || exit 1
    done
}

build_platform_agents() {
    local p=$1
    local mode=$2
    local ta

    for ta in $DUMMY $TE_BS_TA ; do
        local ta_platform="TE_BS_TA_${ta}_PLATFORM"

        test "${!ta_platform}" = "$p" || continue

        build_agent "$ta" "$mode" || return $?
    done

    return 0
}

# Acquire shadow build directory on agent and TE host.
acquire_shadow_build_directory() {
    local res

    # get or create new name of shadow build directory
    if test ! -f "${p}.sbd"; then
        te_eval_or_ssh "${p}" "mktemp -d -u" >"${p}.sbd"
    fi
    local sbd=$(cat "${p}.sbd")

    # recreate SBD on TE host
    test -d "${sbd}" && rm -rf "${sbd}"
    mkdir -p "${sbd}" || exit 1

    # make sure that the SBD on TE host and on agent host are different directories
    local temp_file="$(mktemp "${sbd}/XXXXXXXX")"
    te_eval_or_ssh "${p}" "test -f '$temp_file'"
    if test "$?" -eq "0"; then
        rm -f "${p}.sbd"
        rm -rf "${sbd}"
        return # this is normal situation, build without SBD
    fi
    rm -f "$temp_file"

    # distribute files from TE_BUILD to the SBD on both hosts
    te_eval_or_ssh "${p}" "
        test -d '${sbd}' && rm -rf '${sbd}'
        mkdir -p '${sbd}/platforms/${p}' || exit 1
        mkdir -p '${sbd}/agents/${p}' || exit 1
    "
    res=$?; if test "$res" -ne "0" ; then exit $res; fi
    for type in platforms agents; do
        mkdir -p "${sbd}/${type}/${p}" || exit 1
        test -d "${type}/${p}" || continue
        cp -rp "${type}/${p}" "${sbd}/${type}"
        tar -C "${type}/${p}" -czf - . |
            te_eval_or_ssh "${p}" "
                tar -C '${sbd}/${type}/${p}' -xzf -
            "
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done

    local applist="TE_BS_TA_APPS_${p}"
    local app
    for app in ${!applist}; do
        mkdir -p "${sbd}/apps/${app}/${p}" || exit 1
        te_eval_or_ssh "${p}" "mkdir -p '${sbd}/apps/${app}/${p}'"
        test -d "apps/${app}/${p}" || continue
        cp -rp "apps/${app}/${p}" "${sbd}/apps/${app}"
        tar -C "apps/${app}/${p}" -czf - . |
            te_eval_or_ssh "${p}" "
                tar -C '${sbd}/apps/${app}/${p}' -xzf -
            "
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done
}

# Release shadow build directory on agent and TE host.
# Note that ${platform}.sbd file should not be deleted until
# the end of tests, because TCE processing may depend on its
# contents, see te_tce_process script
release_shadow_build_directory() {
    local res

    if test ! -f "${p}.sbd"; then
        return
    fi
    local sbd=$(cat "${p}.sbd")

    # remove files from the SBD on TE host
    rm -rf "${sbd}" || exit 1

    local applist="TE_BS_TA_APPS_${p}"
    local app

    # cleanup TE_BUILD
    rm -rf "platforms/${p}"
    rm -rf "agents/${p}"
    for app in ${!applist}; do rm -rf apps/${app}/${p}; done

    # return files from the SBD on agent host
    for app in ${!applist}; do
        te_eval_or_ssh "${p}" "
            tar -C '${sbd}' -czf - apps/${app}/${p}
        " | tar -xzf -
        res=$?; if test "$res" -ne "0" ; then exit $res; fi
    done
    te_eval_or_ssh "${p}" "
        tar -C '${sbd}' -czf - platforms/${p} agents/${p}
        rm -rf '${sbd}' >/dev/null
    " | tar -xzf -
    res=$?; if test "$res" -ne "0" ; then exit $res; fi
    find . -type l | xargs ${TE_BASE}/engine/builder/te_fixlink "${sbd}" .
}

build_platform_and_agent() {
    local p=$1
    local mode=$2
    local plocalbuild="TE_BS_TA_${p}_LOCAL_BUILD"
    local res

    need_build_platform "$p" "$mode" || return 0

    if test "${!plocalbuild}" = "local"; then
        local pplatform="TE_BS_TA_${p}_PLATFORM"
        declare "${!pplatform}_SSH"=""
    fi
    acquire_shadow_build_directory
    (
        build_platform "$p" "$mode" || mode=all
        build_platform_agents "$p" "$mode"
    )
    res=$?
    release_shadow_build_directory
    return $res
}

build_platform_and_agent "$@"

exit $?
