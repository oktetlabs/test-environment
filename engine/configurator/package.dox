/**

@page te_engine_conf Test Engine: Configurator

@section te_engine_conf_introduction Introduction

Configurator (Configuration Subsystem, CS) is an application of
Test Engine that exports configuration tree. 
A node of configuration tree can be associated with some software or hardware
component controlled or tracked by a Test Agent. Such nodes have well-known
path names and require support on Test Agent side. Also Configurator allows
creating an arbitrary set of auxiliary configuration nodes that are not
associated with anything and rather play role of shared storage or database.

Configurator features:
- stores a configuration database;
- synchronizes the database with Test Agents;
- provides an API to tests for the configuration reading and changing;
- provides an API to tests and Tester for backuping, verifying and
  restoring the configuration;
- provides an API to tests for Test Agents rebooting with or without
  restoring of the configuration.
.

@image html ten_conf_context.png "Configurator context in TE"

<!--
@startditaa "ditaa ten_conf_context.png -S"
+---------------+   +--------------+
|     Tests     |   |    Tester    |
+-------+-------+   +-------+------+
        |                   |
        |                   |
        v                   v
    +---------------------------+
    | cPNK                      |
    |      Configurator API     |
    |        lib/confapi        |
    +-------------+-------------+
                  | IPC
                  v
     +-------------------------+
     | cGRE          +-------+ |
     |               | Local | |
     | Configurator  |  DB   | |
     |               |  {s}  | |
     |               +-------+ |
     |                  {s}    |
     +-------------------------+
                  |
                  | rcf_ta_cfg_xxx
                  v
     +-------------------------+
     |         RCF API         |
     |       lib/rcfapi        |
     +------------+------------+
                  | IPC
                  v
     +-------------------------+
     |           RCF           |
     +------------+------------+
                  |
                  |
     +------------|---------------------------+
     |            v                Test Agent |
     |  +--------------------+    ----------- |
     |  | cPNK               |                |
     |  |      RCF PCH       |                |
     |  |    lib/rcfpch      |                |
     |  +--+-----------------+                |
     |     |              ^                   |
     |     |   node       | rcf_pch_add_node  |
     |     | callback     | rcf_pch_del_node  |
     |     v              |                   |
     | +------------------+---+               |
     | |    TA Configuring    |               |
     | |       support        |               |
     | |   agents/unix/conf   |               |
     | +----------------------+               |
     +----------------------------------------+
@endditaa
-->

@section te_engine_conf_tree Configuration tree structure - Objects and Instances

A configuration database consists of two trees: the tree of objects and
the tree of instances.
Objects are used to specify the attributes of an abstract configuration item:
- type: integer, string, address (IPv4, IPv6, MAC); 
- access rights for the configuration item:
  read-only, read-write, read-create;
- relations between configuration items
  (ownership of one item by another item);
- dependencies between items (if changing of one configuration item
  may affect the existence or value of another configuration item).
.

For example, MAC address of the network interface would have access rights
“read-write”, type “address”, be owned by the interface, which in its turn
is owned by the host.
An IP address of the network interface (which is also “owned” by this
interface) has access rights “read-create” because several IP addresses
may be assigned to a single interface.

Each object is identified by a string, which consists of several labels
(sub-identifiers) separated by slashes.
Each node in the object tree has its own sub-identifier and the full object
identifier of the node is a sequence of sub-identifiers of its ancestors.

For example, an object “/agent/interface/net_addr” is a son of the object
“/agent/interface” which in its turn is a son of the object “/agent”.

Tree of instances contains information about real configuration items
observed by CS on Test Agents, and/or instances created during processing
of the configuration file or test requests.

Each instance also has an object identifier. It also consists of a set of
labels separated by slashes, but each label contains both a sub-identifier
of the corresponding object and an instance name, which identifies uniquely
the particular configuration item.
Instance name is separated from the sub-identifier by a colon.

For example, the instance “/agent:nut/interface:eth0/net_addr:1.2.3.4” of
the object “/agent/interface/net_addr” corresponds to IP address “1.2.3.4”
on the network interface “eth0” of the station on which Test Agent named
“nut” is running.

It's allowed to use empty instance names.
For example, “/agent/:nut/interface:eth0/link_addr:” identifier is possible
because the interface may have only one link address.
An object sub-identifier must not contain symbols ':' (however this symbol
is allowed in the instance name), '*' and ' ' (space).

Instances which belong to “/agent:” subtree correspond to real configuration
items observed on the Test Agents (network interfaces, IP addresses, routes,
ARP entries, daemons, etc.). Their change may lead to re-configuration of
remote hosts.

The list of basic configuration objects, which is likely to be supported by
any Test Agent, can be found in doc/cm/cm_base.xml file.

Other subtrees may be considered as information store: changing instances in
these subtrees does not affect the hosts controlled by Test Agents, but may be
used to share data between tests.

@section te_engine_conf_oper Configuration Operations

Two operations are allowed for the objects: <em>Register</em> and
<em>Unregister</em>. <em>Register</em> operation describes attributes of
a new object (identifier, type, access, dependencies) to Configurator.
<em>Unregister</em> command forces Configurator to forget about the object.
Usually a command <em>Register</em> is used in the configuration file.

Three operations are allowed for instances: <em>Set</em> (change the value),
<em>Add</em> (add a new instance) and <em>Delete</em>
(delete an existing instance).

Moreover, Configurator provides an API for read access to the object and
instance databases (including different kinds of lookup).

All operations requested in the configuration file and by the tests are
stored in the history to allow quick configuration restoring.

@section te_engine_conf_backup Configuration Backup

Configuration backup is a snapshot of the object and instance trees.
It is stored in the file and may be associated with the point in
the command history. It is possible to create several backups at
one or different points of the history.

Backup verification is a simple comparison of the backup (snapshot)
with the current state of the database.

Restoring the configuration may be performed using two approaches:
- Restoring by history (used only if a backup is associated with some
  point in the history):
  - The command list in the history is scanned in reverse order until
   the backup point is met.
  - The effect of each command is rolled back (for the <em>add</em> command
    the corresponding instance is deleted, for the <em>delete</em> command
    the corresponding instance  is added etc.).
  .
- Restoring by a backup file (used when the backup is not associated with
  the history point or when the first approach fails):
  - Current database is synchronized with the snapshot – excessive instances
    are removed, missed instances are added, incorrect values are changed.
  .
.

After a successful restoring of the backup from the history or after
a successful backup verification the command history may be cut off.

@section te_engine_conf_file Configuration File

Configurator has its own configuration file where it is possible to specify
the sequence of configuration operations to be run on Configurator start-up.
It is also possible to use a backup-like snapshot as a configuration file,
which could be useful when you want to reproduce some problem that happens
with particular configuration set-up.

*/

