/**

@page te_engine_logger Test Engine: Logger

@section te_engine_logger_introduction Introduction

Logger provides an API for event logging to TE Subsystems, Test Agents and tests (if Test Agent runs on an operating system with shared address space, logging facilities may be provided to tested software as well).

Logger stores log messages in a binary file in raw format that can be later converted to XML, HTML and plain text as well as filtered.

@section te_engine_logger_operation Operation

Logger exports two libraries:
- @ref loggerten, a library to use by components of TEN side;
- @ref loggerta, a library to use on Test Agent side.
.

@TODO picture

Some Logger's behaviour can be configured via XML based configuration file. XML schema for Logger configuration file can be found at doc/xsd/logger_config.xsd.

Even though Logger exports two libraries from users point of view there is no difference which library is in use because external API defined in include/logger_api.h hides all the differences.

Logging API macros have printf-like arguments (format string and format arguments). Different logging macros are defined for different log levels. For example,
- ERROR (errors and faults);
- WARN (warnings);
- RING (significant events);
- INFO (informational);
- VERB (verbose);
- ENTRY (function entry point);
- EXIT (function exit).

Log level is a compile-time value â€“ low log level leads to removing macro calls by the pre-processor. ERROR, WARN and RING are enabled by default.

Logger provides script-based mechanism for using by Dispatcher and Builder. It is necessary to support logging during initialization.

Logger utilizes a service provided by RCF to obtain list of active Test Agents and gather log from Test Agents.
 
 */
