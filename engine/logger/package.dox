/**

@page te_engine_logger Test Engine: Logger
- @subpage logger_api

@tableofcontents 

@section te_engine_logger_introduction Introduction

Logger provides an API for event logging to TE Subsystems, Test Agents and
tests (if Test Agent runs on an operating system with shared address space,
logging facilities may be provided to tested software as well).

Logger stores log messages in a binary file in raw format that can be later
converted to XML, HTML and plain text as well as filtered.

@section te_engine_logger_operation Operation

@image html ten_logger_context.png "Logger context in TE"

<!--
@startditaa "ditaa ten_logger_context.png -S" 
 +-----------------------------------------------------------------+
 :                                                    Test Engine  |
 |                                                    -----------  |
 |  +--------------+      +---------------------+                  |
 |  |  Dispatcher  |      |   TEN components    |                  |
 |  |   Builder    |      +----------+----------+                  |
 |  +------+-------+                 |                             |
 |         |                         | Logging                     |
 |         | Logging                 v                             |
 |         v            +-------------------------+                |
 | +----------------+   | cPNK                    |<-----+         |
 | | cPNK           |   |  Logger API (TEN side)  |<---+ |         |
 | | te_log_message |   |      lib/loggerten      |<-+ | |         |
 | +-------+--------+   +------------+------------+  | | |         |
 |         |                         | IPC           | | |         |
 |         v                         v               | | | Logging |
 | +--------------+       +---------------------+    | | |         |
 | | c978         |       | cGRE                |    | | |         |
 | | Raw Log File |<------+       Logger        +----+ | |         |
 | |          {d} |       |                     |      | |         |
 | +--------------+       +----------+----------+      | |         |
 |                                   |                 | |         |
 |            +----------------------+                 | |         |
 |            | rcf_get_ta_list                        | |         |
 |            | rcf_ta_get_log                         | |         |
 |            v                                        | |         |
 | +---------------------+                             | |         |
 | |       RCF API       +-----------------------------+ |         |
 | +----------+----------+                               |         |
 |            |                                          |         |
 |            | IPC                                      |         |
 |            v                                          |         |
 | +---------------------+                               |         |
 | |         RCF         +-------------------------------+         |
 | +---+-----------------+                                         |
 |     |             ^                                             |
 +-----|-----=-------|---------------------------------------------+
       |             |
       |GET_LOG      | Log Data
       |             |
  +----|-------------|--------------------------------------------+
  |    |             |                                Test Agent  |
  |    |             |                                ----------  |
  |    v             |                  +----------------------+  |
  |  +---------------+-+  ta_log_get    | cPNK                 |  |
  |  |     RCF PCH     +------------- ->| Logger API (TA side) |  |
  |  +-----------------+                |     lib/loggerta     |  |
  |                                     +----------------------+  |
  |                                                ^              |
  |                                                |              |
  |                                                | Logging      |
  |                                    +-----------+------------+ |
  |                                    | Test Agent components  | |
  |                                    +------------------------+ |
  +---------------------------------------------------------------+
@endditaa
-->

Logger passively accumulates log messages in raw log file when they are
generated by @ref te_engine components by means of Logger API.
From the other hand log messages generated in Test Agent context accumulated
on Test Agent side by Logger Test Agent library until Logger asks for a bulk
of messages (via @c RCFOP_GET_LOG RCF operation).

Each Test Agent is polled by Logger in regular time intervals in order to
gather accumulated log messages (bulk of messages).
Polling interval can be configured for each Test Agent in Logger
configuration file.

Even though Logger exports two libraries - for Test Engine side
(sources can be found under @path{${TE_BASE}/lib/loggerten} directory)
and Test Agent side (sources can be found under @path{${TE_BASE}/lib/loggerta}
directory), from users point of view there is no difference which
library is in use because @ref logger_api hides all the differences.

Logger defines a number of log levels that gradate log messages by
their importance. According to log levels Logger exports a number of macros
to be used by any TE entity. These macros have printf-like arguments
(format string and format arguments):
- ERROR() - errors and faults;
- WARN() - warnings;
- RING() - significant events;
- INFO() - informational;
- VERB() - verbose;
- ENTRY() - function entry point;
- EXIT() - function exit.
.

Log level is a compile-time value – low log level leads to removing macro
calls by the pre-processor. ERROR, WARN and RING are enabled by default.

Apart from C function API, Logger provides script-based mechanism for logging
to use by @ref te_engine_dispatcher and @ref te_engine_builder.
This interface is necessary to support logging during initialization
(when TEN components haven't been started yet):
- @prog{te_log_init} - script to initialize logging facility;
- @prog{te_log_message} - script to use for logging from scripts.
.

@section te_engine_logger_conf_file Configuration File

@ref te_engine_logger has its own configuration file that can be used to
specify:
- polling interval to use by Logger while gathering log messages from
  @ref te_agents. It is possible to specify default interval that is
  applied to all @ref te_agents as well as intervals for the particular
  Test Agent or for a goup of Agents of the same type;
- sniffer configuration settings.
.

For example the simplest @ref te_engine_logger configuration file would look
like the following:

@code
<?xml version="1.0"?>
<loggerConf>
   <!-- polling value unit is milli seconds. -->
   <polling default="100"/>
</loggerConf>
@endcode

If you need to specify polling intervals on per Test Agent basis or
on per Agent type value you need to write something like:

@code
<?xml version="1.0"?>
<loggerConf>
   <!-- polling value unit is milli seconds. -->
   <polling default="100">
     <!-- Specify polling interval on per Test Agent name basis -->
     <agent agent="Agt_A" value="200"/>
     <!-- Specify polling interval on per Test Agent type basis -->
     <type type="unix" value="300"/>
   </polling>
</loggerConf>
@endcode

XML schema for Logger configuration file can be found at
@path{${TE_BASE}/doc/xsd/logger_config.xsd}.

@section te_engine_logger_log_msg Log messages

Each log message is associated with:
- @attr_name{timestamp} - time value when a log was registered
  in @ref te_engine_logger;
- @attr_name{level} - the value that reflects importance of the message;
- @attr_name{entity name} - identifies @ref te_engine process which logs
  the message (@ref te_engine_rcf, @ref te_engine_tester, test name, etc.)
  or TA where the message was generated;
- @attr_name{user name} - identifies any logical part of the process like
  RCF API library, Configurator API library or agent configuration module.
  Each library must have its own logger user name;
.

All log messages accumulated by @ref te_engine_tester into @path{tmp_raw_log}
file that is by default put under a directory from which
@ref te_engine_dispatcher script is called. The directory where to put
@path{tmp_raw_log} file can be overwritten specifying @prog_option{--log-dir}
option to @ref te_engine_dispatcher.

@todo Add link to RGT

Report generator tool (RGT) should be used to convert raw logs into
different formats. Conversion may be done in @cmd{live} or @cmd{postponed}
modes.

@cmd{Live} mode is suitable to use when it is necessary to get log output
in the text format on the fly. @ref te_engine_dispatcher command-line option
@prog_option{--live–log} should be used to get logs on the fly.

In @cmd{postponed} mode raw log is first converted to XML format
(structured, time ordered) and then XML file can be converted to
HTML or text format log.

To ask @ref te_engine_dispatcher prepare HTML version of the log
you should pass @prog_option{--log-html=[output dir name]} option
in command line. Then @ref te_engine_dispatcher generates HTML
pages under specified @path{[output dir name]} directory.

 */
