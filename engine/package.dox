/**
<!-- @page te_engine Test Engine -->

@defgroup te_engine Test Engine
@ingroup te
@{

@section te_eng_introduction Introduction

Test Engine is a set of software components that provide essential features
of Test Environment. It is unlikely that you will need to update any of
Test Engine components, but more likely you will need to implement some helper
libraries that utilize services provided by Test Engine or you will need to
add some functionality in @ref te_agents.

@image html ten_decomposition.png "High Level decomposition of Test Engine Components"

Test Engine consists of the following components:
- @ref te_engine_dispatcher, which is responsible for configuring and
  starting of another subsystems;
- @ref te_engine_builder, which is responsible for preparing libraries
  and executables for @ref te_agents and TE Subsystems as well as NUT bootable
  images and building the tests;
- @ref te_engine_conf, which is responsible for configuring the environment,
  providing configuration information to tests and for recovering
  the configuration after failures. Moreover it supports some TEN-local
  database used by Test Packages to store shared data;
- @ref te_engine_rcf, which is responsible for starting @ref te_agents and
  for all interactions between @ref te_engine and @ref te_agents on behalf
  of other subsystems and tests;
- @ref te_engine_tester, which is responsible for running a set of
  Test Packages specified by a user in the mode specified by a user
  (one-by-one, simultaneous, debugging);
- @ref te_engine_logger, which provides logging facilities for
  Test Environment (@ref te_engine and @ref te_agents) and tests, and
  log processing tools for users.
.

The following diagram gives more detailed information on
relations between Test Environment components:

@image html ten_interconnections.png "Interconnections of Test Engine components"

<!--
@startditaa "ditaa ten_interconnections.png -S"

      Start/stop    +------------------------+            Start/stop
   +----+-----------+       Dispatcher       +----------------------------+----------+-+
   |    |           +-+----------------------+                            |          | |
   |    |             |                                                   |          | |
   |    |             | Build TE                                          |          | |
   |    v             v                                                   |          | |
   |  +-----------------+                   +---------------------+       |          | |
   |  |                 |  Build tests      |       Tester        |<------+          | |
   |  |                 |<------------------+                     |                  | |
   |  |     Builder     |   Build DUT image |  +---------------+  |                  | |
   |  |                 |<---------------------+     Tests     |  |                  | |
   |  |                 |                   |  +-+----+--------+  |                  | |
   |  +-----------------+                   +----|----|--+--------+                  | |
   |                                             |    |  |                           | |
   |                                             |    |  | Change/get/backup/restore | |
   |                                             |    |  |       configuration       | |
   |                                             |    v  v                           | |
   |  +-----------------+                        |  +-------------------+            | |
   |  |                 |                        |  |                   |            | |
   +->|     Logger      |                        |  |   Configurator    |<-----------+ |
      |                 |                        |  |       {s}         |              |
      +--------+--------+                        |  +-------------------+              |
               |                                 |            |                        |
               | Get log                         |  Control   |   Configure and        |
               |                                 | Test Agent | reboot Test Agents     |
               v                                 v            v                        |
      +----------------------------------------------------------------+               |
      |                    Remote Control Facility                     |<--------------+
      +------------------------------------------+---------------------+
                            ^                    |
                            | Commands and       |   Start/stop
                            |  responses         | TA application
                            v                    v
                          +------------------------+
                          |      Test Agents       |
                          +------------------------+

@endditaa
-->

@} <!-- END te_engine -->


<!-- @page te_engine_dispatcher Test Engine: Dispatcher -->

@defgroup te_engine_dispatcher Test Engine: Dispatcher
@ingroup te_engine
@{

@section te_engine_dispatcher_introduction Introduction

Dispatcher is a subsystem providing a proper initialization and shutdown
of the TEN subsystems.
It prepares the environment (creates directories for temporary files,
exports environment variables, etc.), initiates building, if necessary,
and initializes TEN applications according to options provided on
the command line.

From user point of view @ref te_engine_dispatcher is a BASH script that
launches processes and TEN components according to specified command
line options.

During its operation @ref te_engine_dispatcher sets a few environment
variables among which the most important are:
- @var{TE_BASE}<br/>
Location of Test Environment sources.
If the Dispatcher script is called from the source directory, this variable
is exported automatically. Otherwise if building is necessary
(i.e.,  TE is not pre-installed), @var{TE_BASE} should be exported manually.
- @var{TE_BUILD}<br/>
This variable is exported automatically unless already exported.
It is set to a start directory (a directory from which the Dispatcher
script is called) or, if a file @path{configure.ac} is present in
the start directory, to the (created if needed) @path{build} subdirectory
of the start directory: @path{[start directory]/build}.
- @var{TE_INSTALL}<br/>
This variable is passed as the value of the @prog_option{--prefix} option to
the main @prog{configure} script. Moreover, its value is used when
path variables for the search of headers and libraries are constructed.
It may be set manually. If it is empty, it is set to the directory where
the Dispatcher script is located (if the installed Dispatcher script is used)
or to @path{${TE_BUILD}/inst} (if the Dispatcher script from
the source directory is used).
- @var{TE_INSTALL_SUITE}</br>
User may export this variable to specify the location of Test Suite
executables (for @ref te_engine_builder and @ref te_engine_tester).
If this variable is empty, it is set automatically to
@path{${TE_INSTALL}/suites}.
- @var{TE_TMP}<br/>
This variable is set by @ref te_engine_dispatcher to
@path{[start directory]/te_tmp} by default.
However, if it's desirable to use some other directory for temporary files,
it may be exported manually.
- @var{LD_LIBRARY_PATH}</br>
This variable is exported by @ref te_engine_dispatcher automatically and used
for shared library search.
It is set to @path{${TE_INSTALL}/[host platform]/lib}.
- @var{PATH}<br/>
Path to TEN executables is provided automatically by @ref te_engine_dispatcher.
It updates @path{PATH} variable by @path{${TE_INSTALL}/[host platform]/bin}.
Moreover, if scripts provided by @ref te_engine_logger, @ref te_engine_builder
and storage library to @ref te_engine_dispatcher are not installed yet,
@ref te_engine_dispatcher adds to @path{PATH} variable path to these scripts
in the source directory.

The Dispatcher script accepts a lot of command-line options.
Some of them are its own options, and the rest are passed through to
other TE subsystems. The complete list of the script options as well as
their descriptions can be obtained by calling the Dispatcher script
with the option @prog_option{--help}.

@} <!-- END te_engine -->
 */
