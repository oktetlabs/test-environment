/**
<!-- @page te_engine Test Engine -->

@defgroup te_engine Test Engine
@ingroup te
@{

@section te_eng_introduction Introduction

Test Engine is a set of software components that provide essential features
of Test Environment. It is unlikely that you will need to update any of
Test Engine components, but more likely you will need to implement some helper
libraries that utilize services provided by Test Engine or you will need to
add some functionality in @ref te_agents.

@image html ten_decomposition.png "High Level decomposition of Test Engine Components"

Test Engine consists of the following components:
- @ref te_engine_dispatcher, which is responsible for configuring and
  starting of another subsystems;
- @ref te_engine_builder, which is responsible for preparing libraries
  and executables for @ref te_agents and TE Subsystems as well as NUT bootable
  images and building the tests;
- @ref te_engine_conf, which is responsible for configuring the environment,
  providing configuration information to tests and for recovering
  the configuration after failures. Moreover it supports some TEN-local
  database used by Test Packages to store shared data;
- @ref te_engine_rcf, which is responsible for starting @ref te_agents and
  for all interactions between @ref te_engine and @ref te_agents on behalf
  of other subsystems and tests;
- @ref te_engine_tester, which is responsible for running a set of
  Test Packages specified by a user in the mode specified by a user
  (one-by-one, simultaneous, debugging);
- @ref te_engine_logger, which provides logging facilities for
  Test Environment (@ref te_engine and @ref te_agents) and tests, and
  log processing tools for users.
.

The following diagram gives more detailed information on
relations between Test Environment components:

@image html ten_interconnections.png "Interconnections of Test Engine components"

<!--
@startditaa "ditaa ten_interconnections.png -S"

      Start/stop    +------------------------+            Start/stop
   +----+-----------+       Dispatcher       +----------------------------+----------+-+
   |    |           +-+----------------------+                            |          | |
   |    |             |                                                   |          | |
   |    |             | Build TE                                          |          | |
   |    v             v                                                   |          | |
   |  +-----------------+                   +---------------------+       |          | |
   |  |                 |  Build tests      |       Tester        |<------+          | |
   |  |                 |<------------------+                     |                  | |
   |  |     Builder     |   Build DUT image |  +---------------+  |                  | |
   |  |                 |<---------------------+     Tests     |  |                  | |
   |  |                 |                   |  +-+----+--------+  |                  | |
   |  +-----------------+                   +----|----|--+--------+                  | |
   |                                             |    |  |                           | |
   |                                             |    |  | Change/get/backup/restore | |
   |                                             |    |  |       configuration       | |
   |                                             |    v  v                           | |
   |  +-----------------+                        |  +-------------------+            | |
   |  |                 |                        |  |                   |            | |
   +->|     Logger      |                        |  |   Configurator    |<-----------+ |
      |                 |                        |  |       {s}         |              |
      +--------+--------+                        |  +-------------------+              |
               |                                 |            |                        |
               | Get log                         |  Control   |   Configure and        |
               |                                 | Test Agent | reboot Test Agents     |
               v                                 v            v                        |
      +----------------------------------------------------------------+               |
      |                    Remote Control Facility                     |<--------------+
      +------------------------------------------+---------------------+
                            ^                    |
                            | Commands and       |   Start/stop
                            |  responses         | TA application
                            v                    v
                          +------------------------+
                          |      Test Agents       |
                          +------------------------+

@endditaa
-->

@} <!-- END te_engine -->


<!-- @page te_engine_dispatcher Dispatcher -->

@defgroup te_engine_dispatcher Dispatcher
@ingroup te_engine
@{

@section te_engine_dispatcher_introduction Introduction

Dispatcher is a subsystem providing a proper initialization and shutdown
of the TEN subsystems.
It prepares the environment (creates directories for temporary files,
exports environment variables, etc.), initiates building, if necessary,
and initializes TEN applications according to options provided on
the command line.

From user point of view @ref te_engine_dispatcher is a BASH script that
launches processes and TEN components according to specified command
line options.

During its operation @ref te_engine_dispatcher sets a few environment
variables among which the most important are:
- @var{TE_BASE}<br/>
Location of Test Environment sources.
If the Dispatcher script is called from the source directory, this variable
is exported automatically. Otherwise if building is necessary
(i.e.,  TE is not pre-installed), @var{TE_BASE} should be exported manually.
- @var{TE_BUILD}<br/>
This variable is exported automatically unless already exported.
It is set to a start directory (a directory from which the Dispatcher
script is called) or, if a file @path{configure.ac} is present in
the start directory, to the (created if needed) @path{build} subdirectory
of the start directory: @path{[start directory]/build}.
- @var{TE_INSTALL}<br/>
This variable is passed as the value of the @prog_option{--prefix} option to
the main @prog{configure} script. Moreover, its value is used when
path variables for the search of headers and libraries are constructed.
It may be set manually. If it is empty, it is set to the directory where
the Dispatcher script is located (if the installed Dispatcher script is used)
or to @path{${TE_BUILD}/inst} (if the Dispatcher script from
the source directory is used).
- @var{TE_INSTALL_SUITE}</br>
User may export this variable to specify the location of Test Suite
executables (for @ref te_engine_builder and @ref te_engine_tester).
If this variable is empty, it is set automatically to
@path{${TE_INSTALL}/suites}.
- @var{TE_TMP}<br/>
This variable is set by @ref te_engine_dispatcher to
@path{[start directory]/te_tmp} by default.
However, if it's desirable to use some other directory for temporary files,
it may be exported manually.
- @var{LD_LIBRARY_PATH}</br>
This variable is exported by @ref te_engine_dispatcher automatically and used
for shared library search.
It is set to @path{${TE_INSTALL}/[host platform]/lib}.
- @var{PATH}<br/>
Path to TEN executables is provided automatically by @ref te_engine_dispatcher.
It updates @path{PATH} variable by @path{${TE_INSTALL}/[host platform]/bin}.
Moreover, if scripts provided by @ref te_engine_logger, @ref te_engine_builder
and storage library to @ref te_engine_dispatcher are not installed yet,
@ref te_engine_dispatcher adds to @path{PATH} variable path to these scripts
in the source directory.
- @var{TE_LOG_DIR}</br>
Directory to store log files. Usually set to @var{TE_RUN_DIR} which in it's
turn is set to the current directory (@path{PWD}).

@section te_run_time Start/stop sequence

The following sequence of events happen each time when you launch
Test Environment with @path{dispatcher.sh} or @path{run.sh} script:

-# @ref te_engine_dispatcher script starts with some command line options
   (for more information on @ref te_engine_dispatcher options read
    @ref te_engine_dispatcher_options);
-# @ref te_engine_dispatcher runs @prog{te_log_init} script to initialize
   script based logging facility. All further actions can be logged via
   script based interface (@prog{te_log_message} script). Please note that
   @ref te_engine_logger application hasn't started yet;
-# @ref te_engine_dispatcher starts @ref te_engine_builder to prepare
   libraries and executables for all TE Subsystems
   (except @ref te_engine_dispatcher), Test Packages, @ref te_agents and
   bootable NUT image(s).
   @ret te_engine_builder is passed a configuration file that describes
   a set of executables to be built with a set of options for building
   process.<br/>
   @ref te_engine_builder configuration file name specified via
   @prog_option{--conf-builder} option of @ref te_engine_dispatcher.<br/>
   (For information about @ref te_engine_builder configuration file
   read @ref te_engine_builder_conf_file).<br/>
   Please note that traces of building process are output into the console
   (they are not accumulated in log file);
-# As soon as @ref te_engine_builder successfully built and installed all
   required components, @ref te_engine_dispatcher starts launching
   @ref te_engine componentns. First component to start is
   @ref te_engine_logger. @ref te_engine_logger is passed a configuration
   file whose name can be specified via @prog_option{--conf-logger}
   @ref te_engine_dispatcher command line option (for information about
   the format of @ref te_engine_logger configuration file refer to
   @ref te_engine_logger_conf_file).<br/>
   @ref te_engine_logger starts listening for incoming log requests that
   can come from tests and other TEN components;
-# @ref te_engine_dispatcher starts @ref te_engine_rcf. @ref te_engine_rcf
   is passed a configuration file that describes @ref te_agents to be started
   (for information about the format of @ref te_engine_rcf configuration file
   refer to @ref te_engine_rcf_conf_file).<br/>
   As a part of initialization @ref te_engine_rcf establishes communication
   with @ref te_agents using Test Protocol;
-# As soon as @ref te_engine_rcf has initialized, @ref te_engine_logger
   starts a thread that is responsible for polling @ref te_agents Test Agents
   in order to gather log messages accumulated on Test Agent side. Polling
   interval is configured via @ref te_engine_logger configuration file;
-# @ref te_engine_dispatcher starts @ref te_engine_conf. @ref te_engine_conf
   is passed a configuration file that describes configuration objects to
   register as well as object instances to add (for information about
   the format of @ref te_engine_conf configuration file refer to 
   @ref te_engine_conf_file). On start-up @ref te_engine_conf retrives
   configuration information from @ref te_agents and initializes local trees
   of objects and instances;
-# @ref te_engine_dispatcher starts @ref te_engine_tester.
   @ref te_engine_tester processes configuration file and if necessary asks
   @ref te_engine_builder to build test suites (test executables).
   Then @ref te_engine_tester processes test package description files
   and runs tests in corresponding order and with specified set of parameter
   values. (For information about @ref te_engine_tester configuration file
   format refer to @ref te_engine_tester_conf section).<br/>
   Before running tests, @ref te_engine_tester asks @ref te_engine_conf to
   make a backup of configuration tree. When all tests are finished
   @ref te_engine_tester restores the initial configuration from initial
   backup. To prevent tests from interfering, a backup is created and
   optionally restored before each test as well.
-# When @ref te_engine_tester returns (all tests finished),
   @ref te_engine_dispatcher stops @ref te_engine_conf;
-# Flushing of the log from all Test Agents is performed;
-# @ref te_engine_dispatcher stops @ref te_engine_rcf.
   During its shutdown, @ref te_engine_rcf performs a shutdown of
   all @ref te_agents;
-# @ref te_engine_dispatcher stops @ref te_engine_logger.
   @ref te_engine_dispatcher calls Report Generator tool to convert the log
   from a raw format to the text and/or HTML format;
-# @ref te_engine_dispatcher script finishes its work.
.

@section te_engine_dispatcher_options Dispatcher Command Line Options

The Dispatcher script accepts a lot of command-line options.
Some of them are its own options, and the rest are passed through to
other TE subsystems. Here is the complete list of the @prog{dispatcher.sh}
script options as well as their descriptions obtained by calling it with
@prog_option{--help} option:

<pre class="fragment">
@USER_EXPAND{DISPATCHER_SCRIPT_OPTIONS}
</pre>

@} <!-- END te_engine -->
 */
