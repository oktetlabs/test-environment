# RPC support
# Common constructions to be used in Makefile.am's related to RPCs
#
# Copyright (C) 2016 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author: Artem Andreev <Artem.Andreev@oktetlabs.ru>
#
# $Id:  $
#

SUFFIXES = .x.m4 .x .c.rpch _xdr.c _rpctbl.c _stub.c

RPCCONV_M4 = $(DESTDIR)/$(datadir)/rpcgen/rpcconv.m4
RPCGEN_M4 = $(DESTDIR)/$(datadir)/rpcgen/rpcgen.m4

.c.rpch.c:
	m4 -D__SOURCE__=$< -P $(RPCCONV_M4) $< >$@

.x.m4.x:
	m4 -P $(RPCGEN_M4) $< >$@

# Unfortunately backslash+newline does not work inside sed scripts,
# and in Makefile actions there is no way to insert a plain newline,
# so this and the following effectively must be fit into into a single line.

# What is done here:
# - pthread.h header is eliminated
# - all define's generated by rpcgen are also eliminated
.x.h:
	rpcgen -M -h $< | sed '/^[ \t]*#[ \t]*include[ \t]\+<pthread.h>/d; /^[ \t]*#[ \t]*define[ \t]\+\w\+[ \t]\+[0-9]\+[ \t]*$$/d' >$@

.x_xdr.c:
	rpcgen -M -c $< | sed '1i#include "config.h"' >$@

# What is done here:
# - after a pack of header inclusions
# - for each declared RPC entry point, the following record is constructed:
#   + name
#   + pointer to server-side implementation or NULL for client side
#   + encode/decode XDR routines for RPC in/out arguments
#   + sizes for input and output argument structures
.x_rpctbl.c:
	echo '#include "config.h"' >$@
	echo '#include <te_defs.h>' >>$@
	echo '#include "rpc_xdr.h"' >>$@
	echo '#include "tarpc.h"' >>$@
	echo 'rpc_info ${*F}_functions[] = {' >>$@
	sed -n '/^[ \t]*version/,/^[ \t]*}/s/^[ \t]*\(\w\+\)[ \t]*_\(\w\+\)(\(\w\+\)[ \t]*\*)[ \t]*=[ \t]*[0-9]\+;[ \t]*$$/{"\2", \n#ifdef TE_RPC_CLIENT\nNULL,\n#else\n(rpc_func)_\2_1_svc,\n#endif\n (rpc_func)xdr_\3, sizeof(\3), (rpc_func)xdr_\1, sizeof(\1)},/p' $< >>$@
	echo '{ NULL, NULL, NULL, 0, NULL, 0 }};' >>$@

# What is done here:
# - after a pack of header inclusions
# - for each declared RPC entry point, the following record is constructed:
#   + name
#   + pointer to server-side implementation or NULL for client side
#   + encode/decode XDR routines for RPC in/out arguments
#   + sizes for input and output argument structures
.x_stub.c:
	echo '#include "config.h"' >$@
	echo '#include <stddef.h>' >>$@
	echo '#include <te_defs.h>' >>$@
	echo '#include "rpc_xdr.h"' >>$@
	echo '#include "tarpc.h"' >>$@
	echo 'extern void tarpc_call_unsupported(const char *name, void *out, size_t outsize, size_t common_offset);' >>$@
	sed -n '/^[ \t]*version/,/^[ \t]*}/s/^[ \t]*\(\w\+\)[ \t]*_\(\w\+\)(\(\w\+\)[ \t]*\*)[ \t]*=[ \t]*[0-9]\+;[ \t]*$$/__attribute__ ((weak)) bool_t _\2_1_svc(\3 *in, \1 *out,  struct svc_req *rqstp) { UNUSED(in); UNUSED(rqstp); tarpc_call_unsupported("\2", \&out->common, sizeof(*out), offsetof(\1, common)); return TRUE; }/p' $< >>$@

RPCGEN_EXTRA_PREREQS = $(RPCCONV_M4) $(RPCGEN_M4)
