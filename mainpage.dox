/** @mainpage

@defgroup te Test Environment
@{

@section te_introduction Introduction

OKTET Labs Test Environment (TE) is a software product that is intended to
ease creating automated test suites.
The history of TE goes back to 2000 year when the first prototype of software
was created. At that time the product was used for testing SNMP MIBs and
CLI commands. Two years later (in 2002) software was extended to support
testing of IPv6 protocol.

Few years of intensive usage the software in testing projects showed that
a deep re-design was necessary to make the architecture flexible and
extandable for new and new upcoming features. In 2003 year it was decided
that the redesign should be fulfilled. Due to the careful and well-thought
design decisions made in 2003 year, the overall TE architecture
(main components and interconnections between them) are still valid even
though a lot of new features has been added since then.

@section te_conventions Conventions

Throught the documentation the following conventions are used:
- directory pathes or file names marked as: @path{/usr/bin/bash},
  @path{Makefile};
- program names (scripts or binary executables) marked as: @prog{gdb},
  @prog{dispatcher.sh};
- program options are maked as: @prog_option{--help}, @prog_option{-q};
- environment variables are marked as: @var{TE_BASE}, @var{${PATH}};
- different directives in configuration files are marked as:
  @func{TE_LIB_PARMS}, @func{include};
- configuration pathes as maked as: @conf_path{/agent/interface},
  @conf_path{/local:/net:A};
- names of different attributes (mainly names of XML element attributes)
  are marked as: @attr_name{type}, @attr_name{src};
- values of different attributes are marked as: @attr_val{unix},
  @attr_val{${TE_BASE}/suites/ipv6-demo};
- different kind of commands or modes are marked as: @cmd{Unregister}, 
  @cmd{live}.
.

@section te_abbreviations Abbreviations

@tdt_start
@tdt_term DUT
@tdt_def  Device Under Test
@tdt_term RCF
@tdt_def  Remote Control Facility
@tdt_term TA
@tdt_def  Test Agent
@tdt_term TE
@tdt_def  Test Environment
@tdt_term TEN
@tdt_def  Test Engine
@tdt_end

@section terminology Terminology

@tdt_start
@tdt_term Communication Service Access Point
@tdt_def An object, which could be created on a Test Agent to send/receive
some data (packets, frames, cells, CLI commands, etc.) A set of primitives
to create and destroy CSAP, receive and send data is associated with each
type of CSAP.
@tdt_term Device Under Test (DUT)
@tdt_def Station where a tested hardware/software is located.
@tdt_term RCF Application Domain
@tdt_def A semantically independent set of services provided by RCF
(for example, TA configuration service).
A set of API functions, protocol commands and routines of TA libraries for
command handling, corresponds to a particular application domain.
Some application domains may be unsupported by some Test Agents.
@tdt_term Test
@tdt_def A complete sequence of actions required to achieve a specific purpose
(e.g., a check that tested system provides a required functionality, complies
to a standard, etc.) and producing a verdict pass/fail (possibly accompanied
by additional data).
@tdt_term Test Package
@tdt_def Group of tightly related tests or test packages, which may share
internal libraries and usually run together (one-by-one or simultaneously).
Test Package may consist of one test. It may have a prologue
(performing some initialization) and epilogue (releasing resources and
restoring TE configuration).
@tdt_termTest Agent
@tdt_defAn application running on the NUT or other station and performing
some actions (configuring NUT or itself, interacting with the tested system,
sending/receiving packets, etc.) according to instructions provided by
the Test Engine. All interactions with the tested system should be performed
via Test Agent only.
@tdt_term Test Engine
@tdt_def Set of applications performing testing of tested subsystem according
to Test Package(s) and configuration specified by a user.
It is responsible for:
- preparing executables for Test Packages, Test Agents and TE Subsystems as
  well as bootable NUT images;
- starting Test Agents and configuring the environment and NUT via
  Test Protocol as well as providing configuration information to tests;
- executing tests in mode and order specified by a user;
- interacting with Test Agents on behalf of tests;
- logging and generation of reports.
.
@tdt_term Test Protocol
@tdt_def Protocol used for Test Engine and Test Agent interaction.
@tdt_term Test Environment (TE)
@tdt_def Software product, which includes:
- software applications (Test Agent, Test Engine, tools, etc.) allowing to
  perform the sequence of actions specified by the test scenario and obtain
  results in convenient form;
- set of libraries supporting specific protocols, platforms and features;
- set of documents describing test creation framework and software tools
  simplifying this task;
- set of documents describing TE enhancement framework
  (creation of new libraries, support of new platforms, etc.) and
  software tools simplifying this task;
- user guides describing TE usage (how to run tests, possible log formats,
  libraries API, etc.).
.
Note, that tests are not considered as part of the TE.
@tdt_term Test Environment Subsystem
@tdt_def A mandatory and logically separate module
(which may include software, data, documents) of the Test Environment
responsible for one of main services provided by TE.
The TE Subsystem can provide service to:
- TE user (for example, TA Creation Framework);
- tests or
- other TE subsystems.
.
TE Subsystem may run in one or several threads (processes),
or on one or several stations (including NUT).
@tdt_end

@section te_architecture Test Environment Architecture

The following picture shows high level decomposition of TE components:

@image html hl-decomposition.png "High Level Decomposition of Test Environment components" 

From the high level point of view TE consists of two main parts:
- @ref te_engine;
- @ref te_agents.

TE subsystems and @ref te_agents are distributed among several applications
running on different stations.
Apart from other things @ref te_engine controls @ref te_agents by means of
so-called Test Protocol - a text-based protocol used in communication
between @ref te_engine and @ref te_agents.

According to initial design @ref te_engine runs on Linux platform and there is
no intend to port it to any other OS type, but @ref te_agents can be run on
different platforms providing particular set of mandatory features for
@ref te_engine. @ref te_agents are the subject to be ported to hardware/software
specific components of test infrastructure.

@section te_run_time Test Environment operation

The following sequence of events happen each time when you launch
Test Environment:

-# @ref te_engine_dispatcher script starts with some command line options
   (for more information on @ref te_engine_dispatcher options read
    @ref te_engine_dispatcher_options);
-# @ref te_engine_dispatcher runs @prog{te_log_init} script to initialize
   script based logging facility. All further actions can be logged via
   script based interface (@prog{te_log_message} script). Please note that
   @ref te_engine_logger application hasn't started yet;
-# @ref te_engine_dispatcher starts @ref te_engine_builder to prepare
   libraries and executables for all TE Subsystems
   (except @ref te_engine_dispatcher), Test Packages, @ref te_agents and
   bootable NUT image(s).
   @ret te_engine_builder is passed a configuration file that describes
   a set of executables to be built with a set of options for building
   process.<br/>
   @ref te_engine_builder configuration file name specified via
   @prog_option{--conf-builder} option of @ref te_engine_dispatcher.<br/>
   (For information about @ref te_engine_builder configuration file
   read @ref te_engine_builder_conf_file).<br/>
   Please note that traces of building process are output into the console
   (they are not accumulated in log file);
-# As soon as @ref te_engine_builder successfully built and installed all
   required components, @ref te_engine_dispatcher starts launching
   @ref te_engine componentns. First component to start is
   @ref te_engine_logger. @ref te_engine_logger is passed a configuration
   file whose name can be specified via @prog_option{--conf-logger}
   @ref te_engine_dispatcher command line option (for information about
   the format of @ref te_engine_logger configuration file refer to
   @ref te_engine_logger_conf_file).<br/>
   @ref te_engine_logger starts listening for incoming log requests that
   can come from tests and other TEN components;
-# @ref te_engine_dispatcher starts @ref te_engine_rcf. @ref te_engine_rcf
   is passed a configuration file that describes @ref te_agents to be started
   (for information about the format of @ref te_engine_rcf configuration file
   refer to @ref te_engine_rcf_conf_file).<br/>
   As a part of initialization @ref te_engine_rcf establishes communication
   with @ref te_agents using Test Protocol;
-# As soon as @ref te_engine_rcf has initialized, @ref te_engine_logger
   starts a thread that is responsible for polling @ref te_agents Test Agents
   in order to gather log messages accumulated on Test Agent side. Polling
   interval is configured via @ref te_engine_logger configuration file;
-# @ref te_engine_dispatcher starts @ref te_engine_conf. @ref te_engine_conf
   is passed a configuration file that describes configuration objects to
   register as well as object instances to add (for information about
   the format of @ref te_engine_conf configuration file refer to 
   @ref te_engine_conf_file). On start-up @ref te_engine_conf retrives
   configuration information from @ref te_agents and initializes local trees
   of objects and instances;
-# @ref te_engine_dispatcher starts @ref te_engine_tester.
   @ref te_engine_tester processes configuration file and if necessary asks
   @ref te_engine_builder to build test suites (test executables).
   Then @ref te_engine_tester processes test package description files
   and runs tests in corresponding order and with specified set of parameter
   values. (For information about @ref te_engine_tester configuration file
   format refer to @ref te_engine_tester_conf section).<br/>
   Before running tests, @ref te_engine_tester asks @ref te_engine_conf to
   make a backup of configuration tree. When all tests are finished
   @ref te_engine_tester restores the initial configuration from initial
   backup. To prevent tests from interfering, a backup is created and
   optionally restored before each test as well.
-# When @ref te_engine_tester returns (all tests finished),
   @ref te_engine_dispatcher stops @ref te_engine_conf;
-# Flushing of the log from all Test Agents is performed;
-# @ref te_engine_dispatcher stops @ref te_engine_rcf.
   During its shutdown, @ref te_engine_rcf performs a shutdown of
   all @ref te_agents;
-# @ref te_engine_dispatcher stops @ref te_engine_logger.
   @ref te_engine_dispatcher calls Report Generator tool to convert the log
   from a raw format to the text and/or HTML format;
-# @ref te_engine_dispatcher script finishes its work.
.

@section te_tools Test Environment Tools

Apart from main components, TE provides the following set of tools:
- <b>Report Generator</b> tool representing logs in different formats
  (<em>RGT</em> tool, see [TODO]);
- <b>Testing Coverage Estimation</b> tool that gives some report about
  the quality of test suite we run against the software under test;
- <b>Test Result comparator</b> tool that can be used to check the
  difference between different test runs (TRC tool);
- <b>Test Package Generator</b> tool.

@section te_services Test Environment Services

From end-users (test writers) point of view TE is a set of services that
allow creating complex and full-functional tests. All services exported by TE
accessible via a set of libraries. Here is the list of libraries available
that are useful while writing this or that test cases:

- @ref te_lib_rpc

- @link logger_api.h API Usage: Logger API @endlink
- @ref confapi
- @ref rcfapi
.

- @ref tapi_conf
.

@}

 */
