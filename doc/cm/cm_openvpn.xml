a<?xml version="1.0"?>
<backup>
    <!-- This configuration is intended for describing of OpenVPN client/server
         configuration -->

    <!--
        Copyright (C) 2003-2018 OKTET Labs.

        Author: Svetlana Fishchuk <Svetlana.Fishchuk@oktetlabs.ru>
    -->

    <!-- OpenVPN instance array.
         Name: user-friendly name for OpenVPN instance. Will be used for lock
               file name generation, therefore must be unique as per the
               host. -->
    <object oid="/agent/openvpn" access="read_create" type="none">
        <depends oid="/agent/rsrc"/>
    </object>

    <!-- Generic -->
    <!-- System interface name which will be used for created tunnel.
         Name: empty
         Value: interface name, i.e. tunX, tapX -->
    <object oid="/agent/openvpn/ifname" access="read_only"
        type="string"/>

    <!-- Current endpoint IP address.
         Name: empty -->
    <object oid="/agent/openvpn/endpoint_ip" access="read_only" type="address"/>

    <!-- Current OpenVPN state. Setting the status triggers the start/stop of
         a daemon, whilst getting of the status tries to get actual status.
         Name: empty
         Value: 0 - disabled
                1 - client mode: connected. server mode: daemon is up and
                waiting for incoming connections
                -->
    <object oid="/agent/openvpn/status" access="read_write" type="integer"/>

    <!-- Is this instance a server?
         Name: empty
         Value: 0 if client, 1 if server -->
    <object oid="/agent/openvpn/is_server" access="read_write" type="integer"/>

    <!-- Operation mode
         Name: empty
         Value: "tun" if TUN mode, "tap" if TAP mode -->
    <object oid="/agent/openvpn/mode" access="read_write" type="string"/>

    <!-- TLS Authentication direction mode, directly influences which side can
         perform TLS handshake
         Name: empty
         Value: "normal" (we do TLS handshake),
                "inverse" (the other side does TLS handshake, must be
                complementary on client/server sides)
                "bidirectional" (both sides do) -->
    <object oid="/agent/openvpn/key_direction" access="read_write"
        type="string"/>

    <!-- Used cipher
         Name: empty
         Value: "AES-128-CBC", "AES-256-CBC", etc (can be checked with
                openvpn - -show-ciphers) -->
    <object oid="/agent/openvpn/cipher" access="read_write" type="string"/>

    <!-- Used digest
         Name: empty
         Value: "MD5", "SHA-256", etc (can be checked with
                openvpn - -show-digests) -->
    <object oid="/agent/openvpn/digest" access="read_write" type="string"/>

    <!-- Filesystem path to TLS key. If not set, will be generated automatically
         Name: empty
         Value: Path to PEM-formatted TLS key, empty string -->
    <object oid="/agent/openvpn/tls_key" access="read_write" type="string"/>

    <!-- Filesystem path to Certification Authority certificate
         Name: empty
         Value: Path to PEM-formatted certificate -->
    <object oid="/agent/openvpn/ca" access="read_write" type="string"/>

    <!-- Filesystem path to client/server own certificate
         Name: empty
         Value: Path to PEM-formatted certificate -->
    <object oid="/agent/openvpn/cert" access="read_write" type="string"/>

    <!-- Filesystem path to client/server own private key associated with 'cert'
         Name: empty
         Value: Path to PEM-formatted private key -->
    <object oid="/agent/openvpn/key" access="read_write" type="string"/>

    <!-- Protocol used for server
         Name: empty
         Value: "TCP", "UDP" -->
    <object oid="/agent/openvpn/proto" access="read_write" type="string"/>

    <!-- The use of LZO compression
         Name: empty
         Value: 0 if disabled, 1 if enabled -->
    <object oid="/agent/openvpn/lzo" access="read_write" type="integer"/>

    <!-- Interface to bind daemon to, the encrypted traffic will flow through it
         Name: empty
         Value: interface name (i.e. "eth1") -->
    <object oid="/agent/openvpn/interface_behind" access="read_write"
        type="string"/>

    <!-- Additional options passed to OpenVPN configuration. Duplicates are
         possible, their handling is determined by daemon itself.
         Name: any
         Value: none -->
    <object oid="/agent/openvpn/option" access="read_create" type="none"/>

    <!-- Value of the option passed to OpenVPN configuration.
         Name: empty
         Value: any option permitted by OpenVPN daemon,
                i.e. "sndbuf 4096" -->
    <object oid="/agent/openvpn/option/value" access="read_write" type="string"/>

    <!-- Port to bind to
         Name: empty
         Value: any valid port, 1194 by default -->
    <object oid="/agent/openvpn/port" access="read_write" type="integer"/>

    <!-- 'ifname' IP assigning facility
         Name: empty
         Value: "internal"  - client: let the OpenVPN server suggest IP address
                              server: use internal facility with addresses
                              determined by 'pool' subtree
                "external"  - no actions would be done, the IP assigning daemon
                              must be started by caller -->
    <object oid="/agent/openvpn/ip_facility" access="read_write"
        type="string"/>

    <!-- Server node. Since instance can act as server or client
         (controlled by is_server parameter), this node groups
         server-only parameters
         Name: empty
         Value: none -->
    <object oid="/agent/openvpn/server" access="read_write" type="none"/>

    <!-- Server's own IP (server only)
         Name: empty
         Value: any valid IP -->
    <object oid="/agent/openvpn/server/ip" access="read_write" type="string"/>

    <!-- Server's own subnet mask (server only)
         Name: empty
         Value: any valid subnet mask -->
    <object oid="/agent/openvpn/server/subnet_mask" access="read_write"
        type="string"/>

    <!-- File system path to Diffie-Hellman parameters (server only).
         If not set, DH parameters will be generated automatically
         Name: empty
         Value: Path to PEM-formatted Diffie-Hellman parameters,
                empty string -->
    <object oid="/agent/openvpn/server/dh" access="read_write" type="string"/>

    <!-- Diffie-Hellman parameter size (server only)
         Name: empty
         Value: any power of two, preferrably >= 2048 (some SSL backends have
                such a limitation due to crackability of keys with lower key
                side) -->
    <object oid="/agent/openvpn/server/dh/size" access="read_write"
        type="integer"/>

    <!-- Pool node
         Name: empty
         Value: none -->
    <object oid="/agent/openvpn/server/pool" access="read_write" type="none"/>

    <!-- Pool start address (server only)
         Name: empty
         Value: any valid and settable IP, lower or equal compared to
                'pool/end' -->
    <object oid="/agent/openvpn/server/pool/start" access="read_write"
        type="string"/>

    <!-- Pool end address (server only)
         Name: empty
         Value: any valid and settable IP, bigger or equal compared to
                'pool/start' -->
    <object oid="/agent/openvpn/server/pool/end" access="read_write"
        type="string"/>

    <!-- Requirement of certificates (server only)
         Name: empty
         Value: 0 (no: raw username and password can be used),
                1 (yes: require certificates) -->
    <object oid="/agent/openvpn/server/require_certs" access="read_write"
    type="integer"/>

    <!-- User array (server only)
         Name: any
         Value: none -->
    <object oid="/agent/openvpn/server/user" access="read_create" type="none"/>

    <!-- User's login (server only)
         Name: empty
         Value: any valid login, can be empty -->
    <object oid="/agent/openvpn/server/user/username" access="read_write"
        type="string"/>

    <!-- User's password (server only)
         Name: empty
         Value: any valid password, can be empty -->
    <object oid="/agent/openvpn/server/user/password" access="read_write"
        type="string"/>

    <!-- Filesystem path to user's certificate (server only)
         Name: empty
         Value: Path to PEM-formatted certificate signed by server's
                Certification Authority -->
    <object oid="/agent/openvpn/server/user/certificate" access="read_write"
        type="string"/>

    <!-- Number of connected users (server only)
         Name: any
         Value: Number of successfully connected users -->
    <object oid="/agent/openvpn/server/connected_users" access="read_only"/>

    <!-- Client node. Since instance can act as server or client
         (controlled by is_server parameter), this node groups
         clients-only parameters
         Name: empty
         Value: none -->
    <object oid="/agent/openvpn/server" access="read_write" type="none"/>

         Name: empty
         Value: none -->
    <object oid="/agent/openvpn/client" access="read_write" type="none"/>

    <!-- Peer array (client only)
         Name: IP address of remote peer
         Value: none -->
    <object oid="/agent/openvpn/client/peer" access="read_create" type="none"/>

    <!-- Peer's port (client only)
         Name: empty
         Value: port used for that remote peer (1194 by default) -->
    <object oid="/agent/openvpn/client/peer/port" access="read_write"
        type="integer"/>

    <!-- Username (client only) which will be sent to peer for authorization.
         Name: empty
         Value: any valid login, can be empty -->
    <object oid="/agent/openvpn/client/username" access="read_write"
        type="string"/>

    <!-- Password (client only) which will be sent to peer for authorization.
         Name: empty
         Value: any valid password, can be empty -->
    <object oid="/agent/openvpn/client/password" access="read_write"
        type="string"/>

</backup>
