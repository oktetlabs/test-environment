/**
@defgroup terminology Terminology
@ingroup te
@{

@section te_abbreviations Abbreviations

@tdt_start
@tdt_term API
@tdt_def  Application Programming Interface
@tdt_term CLI
@tdt_def  Command Line Interface
@tdt_term CSAP
@tdt_def  Communication Service Access Point
@tdt_term @anchor DUT DUT
@tdt_def  Device Under Testing
@tdt_term LAN
@tdt_def  Local Area Network
@tdt_term @anchor NUT NUT
@tdt_def  Node Under Testing
@tdt_term RCF
@tdt_def  Remote Control Facility
@tdt_term RGT
@tdt_def  Report Generator Tool
@tdt_term TA
@tdt_def  Test Agent
@tdt_term TAD
@tdt_def  Traffic Application Domain of the RCFG
@tdt_term TCE
@tdt_def  Test Coverage Estimation
@tdt_term TE
@tdt_def  Test Environment
@tdt_term TEN
@tdt_def  TE Engine
@tdt_term @anchor TST TST
@tdt_def  Tester Node
@tdt_end

@section terminology Terminology

@tdt_start
@tdt_term Communication Service Access Point
@tdt_def An object, which could be created on a Test Agent to send/receive
some data (packets, frames, cells, CLI commands, etc.) A set of primitives
to create and destroy CSAP, receive and send data is associated with each
type of CSAP.
@tdt_term Device Under Test (DUT)
@tdt_def Station where a tested hardware/software is located.
@tdt_term RCF Application Domain
@tdt_def A semantically independent set of services provided by RCF
(for example, TA configuration service).
A set of API functions, protocol commands and routines of TA libraries for
command handling, corresponds to a particular application domain.
Some application domains may be unsupported by some Test Agents.
@tdt_term Test
@tdt_def A complete sequence of actions required to achieve a specific purpose
(e.g., a check that tested system provides a required functionality, complies
to a standard, etc.) and producing a verdict pass/fail (possibly accompanied
by additional data).
@tdt_term Test Package
@tdt_def Group of tightly related tests or test packages, which may share
internal libraries and usually run together (one-by-one or simultaneously).
Test Package may consist of one test. It may have a prologue
(performing some initialization) and epilogue (releasing resources and
restoring TE configuration).
@tdt_termTest Agent
@tdt_defAn application running on the NUT or other station and performing
some actions (configuring NUT or itself, interacting with the tested system,
sending/receiving packets, etc.) according to instructions provided by
the Test Engine. All interactions with the tested system should be performed
via Test Agent only.
@tdt_term Test Engine
@tdt_def Set of applications performing testing of tested subsystem according
to Test Package(s) and configuration specified by a user.
It is responsible for:
- preparing executables for Test Packages, Test Agents and TE Subsystems as
  well as bootable NUT images;
- starting Test Agents and configuring the environment and NUT via
  Test Protocol as well as providing configuration information to tests;
- executing tests in mode and order specified by a user;
- interacting with Test Agents on behalf of tests;
- logging and generation of reports.
.
@tdt_term Test Protocol
@tdt_def Protocol used for Test Engine and Test Agent interaction.
@tdt_term Test Environment (TE)
@tdt_def Software product, which includes:
- software applications (Test Agent, Test Engine, tools, etc.) allowing to
  perform the sequence of actions specified by the test scenario and obtain
  results in convenient form;
- set of libraries supporting specific protocols, platforms and features;
- set of documents describing test creation framework and software tools
  simplifying this task;
- set of documents describing TE enhancement framework
  (creation of new libraries, support of new platforms, etc.) and
  software tools simplifying this task;
- user guides describing TE usage (how to run tests, possible log formats,
  libraries API, etc.).
.
Note, that tests are not considered as part of the TE.
@tdt_term Test Environment Subsystem
@tdt_def A mandatory and logically separate module
(which may include software, data, documents) of the Test Environment
responsible for one of main services provided by TE.
The TE Subsystem can provide service to:
- TE user (for example, TA Creation Framework);
- tests or
- other TE subsystems.
.
TE Subsystem may run in one or several threads (processes),
or on one or several stations (including NUT).
@tdt_end

@} <!-- END terminology -->
*/
