/**

@defgroup console_ll Console Log Level Configuration
@ingroup kernel_log
@{

@section console_ll_intro Introduction
The kernel routine <b>printk()</b> will only print a message on the console, if it has a <b>loglevel</b> less than the value of the variable <b>console_loglevel</b>. The <b>Test Environment</b> provides possibility of configure the <b>console_loglevel</b> variable on the system, where is launched <b>agent</b>.
For more information about kernel log levels see the <b>printk(9)</b>, <b>klogctl(3)</b> and <b>/proc/sys/kernel/printk</b> documentation.

@subsection console_ll_intro_table Table of levels
<table class="inline"  border=1>
    <tr class="row0">
        <td class="col0 leftalign"> Number          </td>
        <td class="col1 leftalign"> Name            </td>
        <td class="col2 leftalign"> Description     </td>
    </tr>
    <tr class="row1">
        <td class="col0 leftalign"> 0               </td>
        <td class="col1 leftalign"> KERN_EMERG      </td>
        <td class="col2 leftalign"> System is unuseable </td>
    </tr>
    <tr class="row2">
        <td class="col0 leftalign"> 1      </td>
        <td class="col1 leftalign"> KERN_ALERT    </td>
        <td class="col2 leftalign"> Action must be taken immediately </td>
    </tr>
    <tr class="row3">
        <td class="col0 leftalign"> 2      </td>
        <td class="col1 leftalign"> KERN_CRIT     </td>
        <td class="col2 leftalign"> Critical conditions </td>
    </tr>
    <tr class="row4">
        <td class="col0 leftalign"> 3      </td>
        <td class="col1 leftalign"> KERN_ERR      </td>
        <td class="col2 leftalign"> Error conditions </td>
    </tr>
    <tr class="row5">
        <td class="col0 leftalign"> 4      </td>
        <td class="col1 leftalign"> KERN_WARNING  </td>
        <td class="col2 leftalign"> Warning conditions </td>
    </tr>
    <tr class="row6">
        <td class="col0 leftalign"> 5      </td>
        <td class="col1 leftalign"> KERN_NOTICE   </td>
        <td class="col2 leftalign"> Normal but significant condition </td>
    </tr>
    <tr class="row7">
        <td class="col0 leftalign"> 6      </td>
        <td class="col1 leftalign"> KERN_INFO     </td>
        <td class="col2 leftalign"> Informational </td>
    </tr>
    <tr class="row8">
        <td class="col0 leftalign"> 7      </td>
        <td class="col1 leftalign"> KERN_DEBUG    </td>
        <td class="col2 leftalign"> Debug-level messages </td>
    </tr>
</table>

@section console_ll_obj Configurator object
There is a new object to set log level value. The object <b>console_loglevel</b> is located on the <b>/agent/sys</b> subtree. Make sure that the objects are registered:
@code
<?xml version="1.0"?>
<history>
  <register>
    <object oid="/agent/sys" access="read_only" type="none"/>
    <object oid="/agent/sys/console_loglevel" access="read_write" type="integer"/>
  </register>
</history>
@endcode

@section console_ll_howto How to use
<note>The <b>loglevel</b> value should be a digit in the range 1-8. See the [[te:console_loglevel#table_of_levels|Table of levels]] section. </note>

@subsection console_ll_howto_configurator Configurator

To set a console log level - write the level number as value field of instance. See the following example.
@code
  <set>
    <instance oid="/agent:Agt_A/sys:/console_loglevel:" value="4"/>
  </set>
@endcode

@subsection console_ll_howto_tapi Test API
Also can be used the Test API function shown below.
@code
    /**
     * Set the console log level
     * 
     * @param agent    Test agent name
     * @param level    Console log level (See printk(9))
     *
     * @return Status code
     * @retval 0            Success
     */
    te_errno
    tapi_cfg_set_loglevel(const char *agent, int level);
@endcode

@subsection console_ll_howto_eg Example
The example demonstrates how to change the console log level from <b>test</b>.
@code
    #include "tapi_cfg.h"
    
    tapi_cfg_set_loglevel("Agt_A", 5);
@endcode

@} <!-- Console Log Level Configuration -->
*/
