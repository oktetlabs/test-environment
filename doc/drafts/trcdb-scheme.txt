/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright (C) 2010-2022 OKTET Labs Ltd. All rights reserved. */

/* Night testing results tracking database */

DROP DATABASE trc;
CREATE DATABASE trc;
USE trc;

/* Table tags describes all tags used in TRC
     name - Name of tag
     descr - Textual description of the tag
 */
CREATE TABLE tags (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name     VARCHAR(16) UNIQUE,
    descr    TEXT,
    INDEX(name)
);

/* Table reqs describes all requirements used in TRC
     name - Name of requirement (WIFI_SPECIFIC, LANGROUPS_SPECIFIC,...)
     descr - Textual description of the requirement
 */
CREATE TABLE reqs (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name     VARCHAR(16) UNIQUE,
    descr    TEXT,
    INDEX(name)
);

/* Table boards describes all requirements used in TRC
     name - Name of the board (1311i, 1350,...)
     descr - Textual description of the board
 */
CREATE TABLE boards (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name     VARCHAR(16) UNIQUE,
    descr    TEXT,
    INDEX(name)
);

/* Table board_tags describes a set of tags for each board type
     board - board index in boards table
     tag - tag index in tags table
 */
CREATE TABLE board_tags (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    board    INT NOT NULL,
    tag      INT NOT NULL,
    INDEX (board, tag),
    FOREIGN KEY (board) REFERENCES boards(id),
    FOREIGN KEY (tag) REFERENCES tags(id)
);

/* Table board_reqs describes a set of requirements
   for each board
     board - board index in boards table
     req - requirement index in requirements table
 */
CREATE TABLE board_reqs (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    board    INT NOT NULL,
    req      INT NOT NULL,
    INDEX (board, req),
    FOREIGN KEY (board) REFERENCES boards(id),
    FOREIGN KEY (req) REFERENCES requirements(id)
);

/* Table configurations describes all configurations involved in night testing
     name - Name of configuration
     board - board type used in configuration
     descr - configuration description
     reqs(?) - set of configuration specific requirements used to
               run/skip test iterations
     tags - set of configuration specific tags used for results comparison
 */
CREATE TABLE configurations (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name     VARCHAR(16) UNIQUE,
    board    INT,
    descr    TEXT,
    INDEX(name),
    FOREIGN KEY (board) REFERENCES boards(id)
);

/* Table configuration_tags describes a set of tags for each configuration
     cfg - configuration index in configurations table
     tag - tag index in tags table
 */
CREATE TABLE configuration_tags (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    cfg      INT NOT NULL,
    tag      INT NOT NULL,
    INDEX (cfg, tag),
    FOREIGN KEY (cfg) REFERENCES configurations(id),
    FOREIGN KEY (tag) REFERENCES tags(id)
);

/* Table configuration_reqs describes a set of requirements
   for each configuration
     cfg - configuration index in configurations table
     req - requirement index in requirements table
 */
CREATE TABLE configuration_reqs (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    cfg      INT NOT NULL,
    req      INT NOT NULL,
    INDEX (cfg, req),
    FOREIGN KEY (cfg) REFERENCES configurations(id),
    FOREIGN KEY (req) REFERENCES reqs(id)
);

/* Table branches describes all branches that should be tested
     name - Name of branch
     descr - branch description (kernel version,...)
     build - firmware build timestamp
     revision - version control revision of the branch
 */
CREATE TABLE branches (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name     VARCHAR(16) NOT NULL,
    descr    VARCHAR(128),
    build    TIMESTAMP,
    revision INT,
    INDEX (name)
);

/* Table branch_tags describes a set of tags for each branch
     branch - branch index in branches table
     tag - tag index in tags table
 */
CREATE TABLE branch_tags (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    branch   INT NOT NULL,
    tag      INT NOT NULL,
    INDEX (branch, tag),
    FOREIGN KEY (branch) REFERENCES branches(id),
    FOREIGN KEY (tag) REFERENCES tags(id)
);

/* Table branch_reqs describes a set of requirements for each branch
     branch - branch index in branches table
     req - requirement index in requirements table
 */
CREATE TABLE branch_reqs (
    id       INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    branch   INT NOT NULL,
    req      INT NOT NULL,
    INDEX (branch, req),
    FOREIGN KEY (branch) REFERENCES branches(id),
    FOREIGN KEY (req) REFERENCES reqs(id)
);

/* Table scrips describes original test scripts without any parameters
     name - name of script
     path - full path of test script within test suite
     objective - test objective, cut from test script doxygen objective field
     description(?) -
 */
CREATE TABLE scripts (
    id           INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name         VARCHAR(32) NOT NULL,
    path         VARCHAR(128) UNIQUE,
    objective    TEXT,
    INDEX (name, path)
);

/* Table parameters describes all parameter lists for all iterations
     iter - iteration index the parameter refers to
     name - parameter name
     value - parameter value
 */
CREATE TABLE parameters (
     id          INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     iter        INT NOT NULL,
     name        VARCHAR(32),
     value       VARCHAR(1024),
     INDEX (iter, name),
     FOREIGN KEY (iter) REFERENCES iterations(id)
);

/* Table subsystems describes the list of subsystems that are tested with each iteration
     name - subsystem name
 */
CREATE TABLE subsystems (
     id          INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name        VARCHAR(32) NOT NULL,
     INDEX (name)
);

/* Table tested_subsystems describes the list of subsystems
   that are tested with each iteration
     iter - iteration index the subsystem is tested with
     sub_id - subsystem index
 */
CREATE TABLE tested_subsystems (
     id          INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     iter        INT NOT NULL,
     sub_id      INT NOT NULL,
     INDEX (iter, sub_id),
     FOREIGN KEY (iter) REFERENCES iterations(id),
     FOREIGN KEY (sub_id) REFERENCES subsystems(id)
);

/* Table iterations describes all available iterations for each test script,
   also contains all sessions with parameters.
     script - index of test script in scripts table
     name - name of iteration
     session - index of session the iteration is running in
 */
CREATE TABLE iterations (
    id           INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    script       INT,
    name         VARCHAR(32),
    session      INT,
    FOREIGN KEY (script)  REFERENCES scripts(id),
    FOREIGN KEY (session) REFERENCES iterations(id)
);

/* Table result_types describes all possible types of test results
     result - testing result (PASSED/FAILED/SKIPPED/CORED/KILLED/ERROR)
 */
CREATE TABLE result_types (
    id           INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    result       VARCHAR(8)
);

/* Table verdicts describes all possible verdicts generated by tests
     verdict - verdict text string
 */
CREATE TABLE verdicts (
    id           INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    verdict      TEXT
);

/* Table test_results stores all night testing results
     iter - index of iteration that was run
     configuration - configuration where the iteration was run
     branch - version of firmware that was tested
     start - start timestamp of iteration
     end - end timestamp of iteration
     result - testing result (PASSED/FAILED/SKIPPED/CORED/KILLED/ERROR)
     session - session index the test is running in
 */
CREATE TABLE test_results (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    iter                INT,
    cfg                 INT,
    branch              INT,
    start               TIMESTAMP,
    end                 TIMESTAMP,
    result              INT,
    session             INT,
    INDEX (iter, cfg, branch),
    FOREIGN KEY (iter) REFERENCES iterations(id),
    FOREIGN KEY (cfg) REFERENCES configuraions(id),
    FOREIGN KEY (branch) REFERENCES branches(id),
    FOREIGN KEY (result) REFERENCES result_types(id),
    FOREIGN KEY (session) REFERENCES test_results(id)
);

/* Table result_verdicts describes sets of verdicts generated by each test run
     test_result - index of test run in test_results table
     verdict_no - verdict sequence number
     verdict_id - index of verdict in verdicts table
 */
CREATE TABLE result_verdicts (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    test_result         INT NOT NULL,
    verdict_no          INT NOT NULL,
    verdict_id          INT NOT NULL,
    INDEX (test_result, verdict_no),
    FOREIGN KEY (test_result) REFERENCES test_results(id),
    FOREIGN KEY (verdict_id) REFERENCES verdicts(id)
);


/* Table expected results represents current trc.xml that contains
   all expected results for comparison
     iter - index of iteration in iterations table
     result - expected result
 */
CREATE TABLE expected_results (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    iter                INT NOT NULL,
    result              INT NOT NULL,
    INDEX (iter),
    FOREIGN KEY (iter) REFERENCES iterations(id),
    FOREIGN KEY (result) REFERENCES result_types(id)
);

/* Table expected_tags describes sets of tags for each expected result
     result - index of test run in expected_results table
     tag - index of tag in tags table
 */
CREATE TABLE expected_tags (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    expected_result     INT NOT NULL,
    tag                 INT NOT NULL,
    INDEX (expected_result, tag),
    FOREIGN KEY (expected_result) REFERENCES expected_results(id),
    FOREIGN KEY (tag) REFERENCES tags(id)
);

/* Table result_verdicts describes sets of verdicts generated by each test run
     expected_result - index of test run in expected_results table
     verdict_no - verdict sequence number
     verdict_id - index of verdict in verdicts table
 */
CREATE TABLE expected_verdicts (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    expected_result     INT NOT NULL,
    verdict_no          INT NOT NULL,
    verdict_id          INT NOT NULL,
    INDEX (expected_result, verdict_no),
    FOREIGN KEY (expected_result) REFERENCES expected_results(id),
    FOREIGN KEY (verdict_id)  REFERENCES verdicts(id)
);

/* Table bugs describes all related bugs
     name - short name of the bug: "OL 4500"
     url - link to corresponding bugzilla
     descr - subject of bugzilla bug
 */
CREATE TABLE bugs (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name                VARCHAR(16) NOT NULL,
    url                 VARCHAR(128),
    descr               TEXT,
    INDEX (name)
);

/* Table expected_bugs describes sets of bugs for each expected result
     expected_result - index of test run in expected_results table
     bug - index of bug in bugzilla
 */
CREATE TABLE expected_bugs (
    id                  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    expected_result     INT NOT NULL,
    bug                 INT NOT NULL,
    INDEX (expected_result, bug),
    FOREIGN KEY (expected_result) REFERENCES expected_results(id),
    FOREIGN KEY (bug) REFERENCES bugs(id)
);
