# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)

AC_INIT([tad],[0.8],[Andrew.Rybchenko@oktetlabs.ru])

AC_CONFIG_SRCDIR([tad_ch.c])

AC_CONFIG_AUX_DIR([../../auxdir])
AC_CONFIG_MACRO_DIR([../../auxdir])

AM_INIT_AUTOMAKE([1.8.5 foreign -Wall])

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])

# Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL

TE_LIB_SET


# FIXME: make it AC macro
find_lib()
{
LIB_PATHNAME=
START=`pwd`
DIRS="`${CC} --print-search-dirs | grep libraries | \
      sed s/libraries// | sed s/=//g | sed s/:/\ /g`"
DIRS="$DIRS `echo $LD_LIBRARY_PATH | sed s/:/\ /g`"
for i in $DIRS ; do
    if cd $i 2>/dev/null ; then
        DIR=`pwd`

# FIXME: It is VERY dirty hack for solaris_64 platform
# The reason is '${CC} --print-search-dirs' gives wrong dirs (32-bit ones)
        if test "$TE_PLATFORM" = solaris_64; then
            if test -d amd64; then
                cd amd64
                DIR=`pwd`
            else
                continue
            fi
        fi

        for j in `find $DIR -name lib$1\*.a` ; do
            name=`basename $j`;
            suffix=${name/lib$1/};
            if test "$suffix" = ".a" ||
               test -z `echo $suffix | sed -s "s,^[[0-9._-]]*.a$,,"`; then
                FILES=$j;
                break 2;
            fi
        done
    fi
    cd $START
done
cd $START

if test -z "$FILES" ; then
    return ;
fi    

for i in $FILES ; do
    LIB_PATHNAME=$i ;
    return ;
done
}


# Check for C compiler features
AC_C_CONST
AC_C_INLINE

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for library functions.
# It is a good idea to check fork, but it's not used and generates a
# warning at configure time.
#AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STRERROR_R
AC_CHECK_FUNCS([gettimeofday inet_ntoa memset select socket strdup strtol])

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT


AC_SUBST([with_name])

TAD_LIBLIST=
TAD_SUBDIRS=
TAD_CH_DEFS=
TA_TAD_LIBS=

proto_specific()
{
    VAR=`echo $1 | awk '{ print toupper($1);}'`
    TAD_LIBLIST="$TAD_LIBLIST $1/libtad_$1.a"
    TAD_SUBDIRS="$TAD_SUBDIRS $1"
    TAD_CH_DEFS="$TAD_CH_DEFS -DWITH_$VAR" 
}



AC_ARG_WITH([atm],, 
[if test "${withval}" = yes; then
   w_atm=true;
   proto_specific atm;
   AC_CONFIG_FILES([atm/Makefile])
 fi
], [w_atm=false])

AC_ARG_WITH([eth],, 
[if test "${withval}" = yes; then
   w_eth=true;
   proto_specific eth;
   AC_CHECK_LIB([pcap], [pcap_open_live],
                [TA_TAD_LIBS="$TA_TAD_LIBS -lpcap"])
   AC_CONFIG_FILES([eth/Makefile])
 fi
], [w_eth=false])
    
AC_ARG_WITH([bridge],, 
[if test "${withval}" = yes; then
   proto_specific bridge;
   AC_CONFIG_FILES([bridge/Makefile])
 fi
], [w_bridge=false])

AC_ARG_WITH([arp],, 
[if test "${withval}" = yes; then
   w_arp=true;
   proto_specific arp;
   AC_CONFIG_FILES([arp/Makefile])
 fi
], [w_arp=false])
    
AC_ARG_WITH([frame],, 
[if test "${withval}" = yes; then
   w_frame=true;
   proto_specific frame;
   AC_CONFIG_FILES([frame/Makefile])
 fi
], [w_frame=false])

AC_ARG_WITH([ipstack],, 
[if test "${withval}" = yes; then
   w_ipstack=true;
   proto_specific ipstack;
   AC_CONFIG_FILES([ipstack/Makefile])
 fi
], [w_ipstack=false])

AC_ARG_WITH([dhcp],, 
[if test "${withval}" = yes; then
   proto_specific dhcp;
   AC_CONFIG_FILES([dhcp/Makefile])
 fi
], [w_dhcp=false])

AC_ARG_WITH([snmp],, 
[if test "${withval}" = yes; then
    w_snmp=true
    proto_specific snmp

    TE_BINUTIL([net-snmp-config], [NET_SNMP_CONFIG_FULL_PATH])

    for i in `$NET_SNMP_CONFIG_FULL_PATH --libs`; do
        if test ${i:0:2} = "-l"; then
            find_lib ${i:2}
            if test -z "${LIB_PATHNAME}" ; then
                AC_MSG_WARN([Cannot find ${i:2} library])
            fi
            TA_TAD_LIBS="$TA_TAD_LIBS ${LIB_PATHNAME}"
        fi
    done
#
# On some systems net-snmp-config --libs does not include
# libcrypto library thinking that this is something 
# that should be dynamically linked and there is no need to
# specify it explicitly.
# In our case we want it to be linked statically, so that
# we should take care about this.
#
    LIB_PATHNAME=
    $NET_SNMP_CONFIG_FULL_PATH --libs | grep crypto >/dev/null ||
         find_lib crypto

    if test -n "${LIB_PATHNAME}" ; then
        TA_TAD_LIBS="$TA_TAD_LIBS ${LIB_PATHNAME}"
    fi

    AC_CONFIG_FILES([snmp/Makefile])
 fi
], [w_snmp=false])

AC_ARG_WITH([cli],, 
[if test "${withval}" = yes; then
    w_cli=true;
    proto_specific cli;
    find_lib expect
    if test -z "${LIB_PATHNAME}" ; then
        AC_MSG_ERROR([Cannot find static expect library])
    fi
    TA_TAD_LIBS="$TA_TAD_LIBS ${LIB_PATHNAME}";
    find_lib util
    if test -z "${LIB_PATHNAME}" ; then
        AC_MSG_ERROR([Cannot find static util library])
    fi
    TA_TAD_LIBS="$TA_TAD_LIBS ${LIB_PATHNAME}";
    AC_CONFIG_FILES([cli/Makefile])
 fi
], [w_cli=false])

AC_ARG_WITH([pcap],, 
[if test "${withval}" = yes; then
    w_pcap=true;
    proto_specific pcap;
    TA_TAD_LIBS="$TA_TAD_LIBS -lpcap";
    AC_CONFIG_FILES([pcap/Makefile])
 fi
], [w_pcap=false])

AC_ARG_WITH([iscsi],, 
[if test "${withval}" = yes; then
    w_iscsi=true;
    proto_specific iscsi;
    AC_CONFIG_FILES([iscsi/Makefile])
 fi
], [w_iscsi=false])

AC_ARG_WITH([socket],, 
[if test "${withval}" = yes; then
   proto_specific socket;
   AC_CONFIG_FILES([socket/Makefile])
 fi
], [w_socket=false])

if test $w_eth = true -o $w_atm = true ; then
   proto_specific llc;
   AC_CONFIG_FILES([llc/Makefile])
fi

AC_SUBST([TAD_LIBLIST])
AC_SUBST([TAD_SUBDIRS])
AC_SUBST([TAD_CH_DEFS])
AC_SUBST([TA_TAD_LIBS])

AM_CONDITIONAL(TAD_DUMMY, test -z "$TAD_LIBLIST")

if test x$w_snmp = xtrue; then 
    AC_MSG_CHECKING(for net-snmp library)
    AC_CHECK_HEADERS([net-snmp/session_api.h], , ,
    [#include <net-snmp/net-snmp-config.h>]
    )

    if test -z "$NET_SNMP_CONFIG_FULL_PATH"; then
        AC_MSG_ERROR([Impossible happens, we should have found \
net-snmp-config earlier])
    fi

    NET_SNMP_CFLAGS=`$NET_SNMP_CONFIG_FULL_PATH --cflags`
fi

AC_SUBST([NET_SNMP_CFLAGS])
AC_SUBST([NET_SNMP_LIBS])

AC_CHECK_HEADERS([sys/bufmod.h])

TE_LIB_RESTORE

AC_OUTPUT
