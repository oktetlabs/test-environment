/**
<!-- 
 @page tapi Test Application Programming Interface
 
 -# <A HREF="tapi__cfg_8h.html">Access configuration model API</A>
 -# <A HREF="tapi__bufs_8h.html">Buffers dealer API</A>
 -# <A HREF="tapi__cfg__arl_8h.html">ARL table configuration model API</A>
 -# <A HREF="tapi__cfg__base_8h.html">Test API for basic configuration model</A>
 -# <A HREF="tapi__cfg__dhcp_8h.html">Test API for DHCP configuration</A>
 -# <A HREF="tapi__cfg__net_8h.html">Test API for network configuration model</A>
 -# <A HREF="tapi__file_8h.html">Test API for convenient work with files on Test Engine</A>
 -# <A HREF="tapi__jmp_8h.html">Test API for thread-safe stack of jump</A>
 -# <A HREF="tapi__sockaddr_8h.html">Test API for generic network addresses</A>
 -# <A HREF="tapi__test_8h.html">Definition of Macros used in test sources</A>
-->

<!-- @page tapi_conf TAPI: Test API for configuration nodes -->

@defgroup tapi_conf TAPI: Test API for configuration nodes
@ingroup confapi
@{

Test scenarios can use functions exported by Configurator API directly:
@ref confapi_base, but there are high level interfaces that simplify access
to some parts of configuration tree.

The following configuration TAPI groups available:
<!--
 -# <A HREF="tapi__cfg__arl_8h.html">ARL table configuration model API</A>
 -# <A HREF="tapi__cfg__base_8h.html">Test API for basic configuration model</A>
 -# <A HREF="tapi__cfg__dhcp_8h.html">Test API for DHCP configuration</A>
 -# <A HREF="tapi__cfg__net_8h.html">Test API for network configuration model</A>
-->

- @ref tapi_conf_switch
- @ref tapi_conf_base_net
- @ref tapi_conf_route
- @ref tapi_conf_neigh
- @ref tapi_conf_iface
.

@} <!-- END tapi_conf -->


@defgroup te_lib_tapi_conf_net TAPI: Test Agent Network topology
@ingroup te_ts
@{

@section te_lib_tapi_conf_net_introduction Introduction

In most cases a test scenario requires a special phisical set-up to
be prepared. The simplest example is when a test expects two nodes to have
a physical connection. From test point of view it does not matter where
these nodes reside - the same test should work on different physical set-ups.

Partly physical set-up for a test run is configured via
@ref te_engine_rcf_conf_file where we specify @ref te_agents to run together
with their physical locations (network hosts).

Each host can have a number of network interfaces some of which can be
connected with interfaces of another hosts mentioned in
@ref te_engine_rcf_conf_file. If we specify relation between network
interfaces we would clarify network topology, not just a list of hosts used
in test procedure.

@image html te_lib_tapi_net_cfg_rcf_only.png "Network topology from RCF point of view"

From @ref te_engine_rcf point of view all hosts where we run @ref te_agents
should be accessible from a host where we run @ref te_engine.
It is not necessary to be a direct link access - for example we can run
@ref te_engine on our local PC, but @ref te_agents can reside on remote hosts
reside in another countries accessed via the Internet.

To specify network topology of hosts used in test set-up we need to
specify relationship between network interfaces.

@image html te_lib_tapi_net_cfg_nets.png "Network topology between Test Agent hosts"

@} <!-- END te_lib_tapi_conf_net -->

*/
