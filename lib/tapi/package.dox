/**
@defgroup tapi_conf TAPI: Test API for configuration nodes
@ingroup confapi
@{

Test scenarios can use functions exported by Configurator API directly:
@ref confapi_base, but there are high level interfaces that simplify access
to some parts of configuration tree.

@} <!-- END tapi_conf -->


@defgroup te_lib_tapi_conf_net TAPI: Network topology configuration of Test Agents
@ingroup te_ts
@{

@section te_lib_tapi_conf_net_introduction Introduction

In most cases a test scenario requires a special phisical set-up to
be prepared. The simplest example is when a test expects two nodes to have
a physical connection. From test point of view it does not matter where
these nodes reside - the same test should work on different physical set-ups.

Partly physical set-up for a test run is configured via
@ref te_engine_rcf_conf_file where we specify @ref te_agents to run together
with their physical locations (network hosts).

Each host can have a number of network interfaces some of which can be
connected with interfaces of another hosts mentioned in
@ref te_engine_rcf_conf_file. If we specify relation between network
interfaces we would clarify network topology, not just a list of hosts used
in test procedure.

@image html te_lib_tapi_net_cfg_rcf_only.png "Network topology from RCF point of view"

From @ref te_engine_rcf point of view all hosts where we run @ref te_agents
should be accessible from a host where we run @ref te_engine.
It is not necessary to be a direct link access - for example we can run
@ref te_engine on our local PC, but @ref te_agents can reside on remote hosts
reside in another countries accessed via the Internet.

To specify network topology of hosts used in test set-up we need to
specify relationship between network interfaces.

@image html te_lib_tapi_net_cfg_nets.png "Network topology between Test Agent hosts"

Later the information about network interfaces can be used by test scenario
to prepare necessary test set-up.

From test scenarios point of view network configuration can be analized
with the help of functions exported by @ref tapi_conf_net library.

The library gets information from local configurator management tree that
shall be prepared by hands for each physical set-up.

Nodes responsible for @ref tapi_conf_net are:
- @conf_path{/net} - root object of network configuration tree. Instance name
  represents network name - an arbitrary string that is associated with 
  a group of nodes belonging to the network.
- @conf_path{/net/node} - network node object. Represents a point of network
  configuration that reside in corresponding network. Instance name is
  an arbitrary string, but the value should keep a reference to configuration
  tree node associated with this network point.<br/>
  More often the value has the following format:
  <pre class="fragment">
    @conf_path{/agent:<agent name>/interface:<interface name>}
  </pre>
  E.g.: @conf_path{/agent:Agt_A/interface:eth0}, which means a nodes is
  associated with interface @conf_path{eth0} that reside on the host
  where Test Agent @conf_path{Agt_A} runs (to find out host name where
  Test Agent runs we should have a look at @ref te_engine_rcf_conf_file).
  You can extend the format of @conf_path{/net/node} value if necessary,
  for example for the case when a node is assocated with a bridge port
  the value would be:
  <pre class="fragment">
    @conf_path{/agent:<agent name>/port:<port id>}
  </pre>
  E.g.: @conf_path{/agent:bridge/port:20}.
- @conf_path{/net/node/type} - type of the network node. Each node is
  assigned with its logical type value:
  - @ref NUT - Node Under Test - node of this type exports functionality
    that we are to test;
  - @ref TST - Tester Node - node of this type provides auxiliary services
    to make it possible to do the testing of functionality exported by
    @ref DUT or @ref NUT.
  .




@} <!-- END te_lib_tapi_conf_net -->

*/
