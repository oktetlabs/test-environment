/* SPDX-License-Identifier: Apache-2.0 */
/** @file
 * @brief RPC types definitions
 *
 * RPC analogues of definitions from errno.h.
 *
 *
 * Copyright (C) 2004-2022 OKTET Labs Ltd. All rights reserved.
 */

#ifndef __TE_RPC_ERRNO_H__
#define __TE_RPC_ERRNO_H__

#include <stdio.h>
#if HAVE_STRING_H
#include <string.h>
#endif
#if HAVE_STRINGS_H
#include <strings.h>
#endif

#include "te_errno.h"

/** RPC errno values */
typedef enum {
    RPC_EOK = 0,
    RPC_ERPCKILLED = TE_RC(TE_RPC, TE_ERPCKILLED),
    RPC_EPERM = TE_RC(TE_RPC, TE_EPERM),
    RPC_ENOENT = TE_RC(TE_RPC, TE_ENOENT),
    RPC_ESRCH = TE_RC(TE_RPC, TE_ESRCH),
    RPC_EINTR = TE_RC(TE_RPC, TE_EINTR),
    RPC_EIO = TE_RC(TE_RPC, TE_EIO),
    RPC_ENXIO = TE_RC(TE_RPC, TE_ENXIO),
    RPC_E2BIG = TE_RC(TE_RPC, TE_E2BIG),
    RPC_ENOEXEC = TE_RC(TE_RPC, TE_ENOEXEC),
    RPC_EBADF = TE_RC(TE_RPC, TE_EBADF),
    RPC_ECHILD = TE_RC(TE_RPC, TE_ECHILD),
    RPC_EAGAIN = TE_RC(TE_RPC, TE_EAGAIN),
    RPC_ENOMEM = TE_RC(TE_RPC, TE_ENOMEM),
    RPC_EACCES = TE_RC(TE_RPC, TE_EACCES),
    RPC_EFAULT = TE_RC(TE_RPC, TE_EFAULT),
    RPC_ENOTBLK = TE_RC(TE_RPC, TE_ENOTBLK),
    RPC_EBUSY = TE_RC(TE_RPC, TE_EBUSY),
    RPC_EEXIST = TE_RC(TE_RPC, TE_EEXIST),
    RPC_EXDEV = TE_RC(TE_RPC, TE_EXDEV),
    RPC_ENODEV = TE_RC(TE_RPC, TE_ENODEV),
    RPC_ENOTDIR = TE_RC(TE_RPC, TE_ENOTDIR),
    RPC_EISDIR = TE_RC(TE_RPC, TE_EISDIR),
    RPC_EINVAL = TE_RC(TE_RPC, TE_EINVAL),
    RPC_ENFILE = TE_RC(TE_RPC, TE_ENFILE),
    RPC_EMFILE = TE_RC(TE_RPC, TE_EMFILE),
    RPC_ENOTTY = TE_RC(TE_RPC, TE_ENOTTY),
    RPC_ETXTBSY = TE_RC(TE_RPC, TE_ETXTBSY),
    RPC_EFBIG = TE_RC(TE_RPC, TE_EFBIG),
    RPC_ENOSPC = TE_RC(TE_RPC, TE_ENOSPC),
    RPC_ESPIPE = TE_RC(TE_RPC, TE_ESPIPE),
    RPC_EROFS = TE_RC(TE_RPC, TE_EROFS),
    RPC_EMLINK = TE_RC(TE_RPC, TE_EMLINK),
    RPC_EPIPE = TE_RC(TE_RPC, TE_EPIPE),
    RPC_EDOM = TE_RC(TE_RPC, TE_EDOM),
    RPC_ERANGE = TE_RC(TE_RPC, TE_ERANGE),
    RPC_EDEADLK = TE_RC(TE_RPC, TE_EDEADLK),
    RPC_ENAMETOOLONG = TE_RC(TE_RPC, TE_ENAMETOOLONG),
    RPC_ENOLCK = TE_RC(TE_RPC, TE_ENOLCK),
    RPC_ENOSYS = TE_RC(TE_RPC, TE_ENOSYS),
    RPC_ENOTEMPTY = TE_RC(TE_RPC, TE_ENOTEMPTY),
    RPC_ELOOP = TE_RC(TE_RPC, TE_ELOOP),
    RPC_EWOULDBLOCK = TE_RC(TE_RPC, TE_EWOULDBLOCK),
    RPC_ENOMSG = TE_RC(TE_RPC, TE_ENOMSG),
    RPC_EIDRM = TE_RC(TE_RPC, TE_EIDRM),
    RPC_ECHRNG = TE_RC(TE_RPC, TE_ECHRNG),
    RPC_EL2NSYNC = TE_RC(TE_RPC, TE_EL2NSYNC),
    RPC_EL3HLT = TE_RC(TE_RPC, TE_EL3HLT),
    RPC_EL3RST = TE_RC(TE_RPC, TE_EL3RST),
    RPC_ELNRNG = TE_RC(TE_RPC, TE_ELNRNG),
    RPC_EUNATCH = TE_RC(TE_RPC, TE_EUNATCH),
    RPC_ENOCSI = TE_RC(TE_RPC, TE_ENOCSI),
    RPC_EL2HLT = TE_RC(TE_RPC, TE_EL2HLT),
    RPC_EBADE = TE_RC(TE_RPC, TE_EBADE),
    RPC_EBADR = TE_RC(TE_RPC, TE_EBADR),
    RPC_EXFULL = TE_RC(TE_RPC, TE_EXFULL),
    RPC_ENOANO = TE_RC(TE_RPC, TE_ENOANO),
    RPC_EBADRQC = TE_RC(TE_RPC, TE_EBADRQC),
    RPC_EBADSLT = TE_RC(TE_RPC, TE_EBADSLT),
    RPC_EDEADLOCK = TE_RC(TE_RPC, TE_EDEADLOCK),
    RPC_EBFONT = TE_RC(TE_RPC, TE_EBFONT),
    RPC_ENOSTR = TE_RC(TE_RPC, TE_ENOSTR),
    RPC_ENODATA = TE_RC(TE_RPC, TE_ENODATA),
    RPC_ETIME = TE_RC(TE_RPC, TE_ETIME),
    RPC_ENOSR = TE_RC(TE_RPC, TE_ENOSR),
    RPC_ENONET = TE_RC(TE_RPC, TE_ENONET),
    RPC_ENOPKG = TE_RC(TE_RPC, TE_ENOPKG),
    RPC_EREMOTE = TE_RC(TE_RPC, TE_EREMOTE),
    RPC_ENOLINK = TE_RC(TE_RPC, TE_ENOLINK),
    RPC_EADV = TE_RC(TE_RPC, TE_EADV),
    RPC_ESRMNT = TE_RC(TE_RPC, TE_ESRMNT),
    RPC_ECOMM = TE_RC(TE_RPC, TE_ECOMM),
    RPC_EPROTO = TE_RC(TE_RPC, TE_EPROTO),
    RPC_EMULTIHOP = TE_RC(TE_RPC, TE_EMULTIHOP),
    RPC_EDOTDOT = TE_RC(TE_RPC, TE_EDOTDOT),
    RPC_EBADMSG = TE_RC(TE_RPC, TE_EBADMSG),
    RPC_EOVERFLOW = TE_RC(TE_RPC, TE_EOVERFLOW),
    RPC_ENOTUNIQ = TE_RC(TE_RPC, TE_ENOTUNIQ),
    RPC_EBADFD = TE_RC(TE_RPC, TE_EBADFD),
    RPC_EREMCHG = TE_RC(TE_RPC, TE_EREMCHG),
    RPC_ELIBACC = TE_RC(TE_RPC, TE_ELIBACC),
    RPC_ELIBBAD = TE_RC(TE_RPC, TE_ELIBBAD),
    RPC_ELIBSCN = TE_RC(TE_RPC, TE_ELIBSCN),
    RPC_ELIBMAX = TE_RC(TE_RPC, TE_ELIBMAX),
    RPC_ELIBEXEC = TE_RC(TE_RPC, TE_ELIBEXEC),
    RPC_EILSEQ = TE_RC(TE_RPC, TE_EILSEQ),
    RPC_ERESTART = TE_RC(TE_RPC, TE_ERESTART),
    RPC_ESTRPIPE = TE_RC(TE_RPC, TE_ESTRPIPE),
    RPC_EUSERS = TE_RC(TE_RPC, TE_EUSERS),
    RPC_ENOTSOCK = TE_RC(TE_RPC, TE_ENOTSOCK),
    RPC_EDESTADDRREQ = TE_RC(TE_RPC, TE_EDESTADDRREQ),
    RPC_EMSGSIZE = TE_RC(TE_RPC, TE_EMSGSIZE),
    RPC_EPROTOTYPE = TE_RC(TE_RPC, TE_EPROTOTYPE),
    RPC_ENOPROTOOPT = TE_RC(TE_RPC, TE_ENOPROTOOPT),
    RPC_EPROTONOSUPPORT = TE_RC(TE_RPC, TE_EPROTONOSUPPORT),
    RPC_ESOCKTNOSUPPORT = TE_RC(TE_RPC, TE_ESOCKTNOSUPPORT),
    RPC_EOPNOTSUPP = TE_RC(TE_RPC, TE_EOPNOTSUPP),
    RPC_EPFNOSUPPORT = TE_RC(TE_RPC, TE_EPFNOSUPPORT),
    RPC_EAFNOSUPPORT = TE_RC(TE_RPC, TE_EAFNOSUPPORT),
    RPC_EADDRINUSE = TE_RC(TE_RPC, TE_EADDRINUSE),
    RPC_EADDRNOTAVAIL = TE_RC(TE_RPC, TE_EADDRNOTAVAIL),
    RPC_ENETDOWN = TE_RC(TE_RPC, TE_ENETDOWN),
    RPC_ENETUNREACH = TE_RC(TE_RPC, TE_ENETUNREACH),
    RPC_ENETRESET = TE_RC(TE_RPC, TE_ENETRESET),
    RPC_ECONNABORTED = TE_RC(TE_RPC, TE_ECONNABORTED),
    RPC_ECONNRESET = TE_RC(TE_RPC, TE_ECONNRESET),
    RPC_ENOBUFS = TE_RC(TE_RPC, TE_ENOBUFS),
    RPC_EISCONN = TE_RC(TE_RPC, TE_EISCONN),
    RPC_ENOTCONN = TE_RC(TE_RPC, TE_ENOTCONN),
    RPC_ESHUTDOWN = TE_RC(TE_RPC, TE_ESHUTDOWN),
    RPC_ETOOMANYREFS = TE_RC(TE_RPC, TE_ETOOMANYREFS),
    RPC_ETIMEDOUT = TE_RC(TE_RPC, TE_ETIMEDOUT),
    RPC_ECONNREFUSED = TE_RC(TE_RPC, TE_ECONNREFUSED),
    RPC_EHOSTDOWN = TE_RC(TE_RPC, TE_EHOSTDOWN),
    RPC_EHOSTUNREACH = TE_RC(TE_RPC, TE_EHOSTUNREACH),
    RPC_EALREADY = TE_RC(TE_RPC, TE_EALREADY),
    RPC_EINPROGRESS = TE_RC(TE_RPC, TE_EINPROGRESS),
    RPC_ESTALE = TE_RC(TE_RPC, TE_ESTALE),
    RPC_EUCLEAN = TE_RC(TE_RPC, TE_EUCLEAN),
    RPC_ENOTNAM = TE_RC(TE_RPC, TE_ENOTNAM),
    RPC_ENAVAIL = TE_RC(TE_RPC, TE_ENAVAIL),
    RPC_EISNAM = TE_RC(TE_RPC, TE_EISNAM),
    RPC_EREMOTEIO = TE_RC(TE_RPC, TE_EREMOTEIO),
    RPC_EDQUOT = TE_RC(TE_RPC, TE_EDQUOT),
    RPC_ENOMEDIUM = TE_RC(TE_RPC, TE_ENOMEDIUM),
    RPC_EMEDIUMTYPE = TE_RC(TE_RPC, TE_EMEDIUMTYPE),
    RPC_ECANCELED = TE_RC(TE_RPC, TE_ECANCELED),
    RPC_ERPCNOTSUPP = TE_RC(TE_RPC, TE_ERPCNOTSUPP),
    RPC_WSANOTINITIALISED = TE_RC(TE_RPC, TE_WSANOTINITIALISED),

    RPC_E_UNEXP_NET_ERR = TE_RC(TE_RPC, TE_E_UNEXP_NET_ERR),
    RPC_E_WAIT_TIMEOUT = TE_RC(TE_RPC, TE_E_WAIT_TIMEOUT),

    RPC_E_OPERATION_ABORTED = TE_RC(TE_RPC, TE_E_OPERATION_ABORTED),

    RPC_E_IO_INCOMPLETE = TE_RC(TE_RPC, TE_E_IO_INCOMPLETE),
    RPC_E_IO_PENDING = TE_RC(TE_RPC, TE_E_IO_PENDING),
    RPC_E_NETNAME_DELETED = TE_RC(TE_RPC, TE_E_NETNAME_DELETED),
    RPC_E_GEN_FAILURE = TE_RC(TE_RPC, TE_E_GEN_FAILURE),
    RPC_E_LOG_FILE_FULL = TE_RC(TE_RPC, TE_E_LOG_FILE_FULL),
    RPC_E_PORT_UNREACHABLE = TE_RC(TE_RPC, TE_E_PORT_UNREACHABLE),
    RPC_E_SHARING_VIOLATION = TE_RC(TE_RPC, TE_E_SHARING_VIOLATION),
    RPC_E_INVALID_NAME = TE_RC(TE_RPC, TE_E_INVALID_NAME),
    RPC_E_BAD_PATHNAME = TE_RC(TE_RPC, TE_E_BAD_PATHNAME),
    RPC_E_ROOT_FULL = TE_RC(TE_RPC, TE_E_ROOT_FULL),

    RPC_EUNSPEC = TE_RC(TE_RPC, TE_EUNSPEC),

    RPC_EUNKNOWN = TE_RC(TE_RPC, TE_EUNKNOWN),
} rpc_errno;

/** Convert system native errno to RPC errno */
static inline rpc_errno
errno_h2rpc(int host_errno_val)
{
    return TE_RC(TE_RPC, te_rc_os2te(host_errno_val));
}

/**
 * Convert RPC errno to string.
 *
 * @note If confiversion fails, the function is not reenterable.
 */
static inline const char *
errno_rpc2str(rpc_errno rpc_errno_val)
{
    if (rpc_errno_val == 0 || TE_RC_GET_MODULE(rpc_errno_val) == TE_RPC)
    {
        return te_rc_err2str(rpc_errno_val);
    }
    else
    {
        static char buf[64];

        strcpy(buf, "Non-RPC ");
        strcat(buf, te_rc_mod2str(rpc_errno_val));
        strcat(buf, "-");
        strcat(buf, te_rc_err2str(rpc_errno_val));
        return buf;
    }
}

#endif /* !__TE_RPC_ERRNO_H__ */
