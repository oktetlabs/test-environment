/* SPDX-License-Identifier: Apache-2.0 */
/** @file
 * @brief RPC types definitions
 *
 * RPC analogues of definitions from linux/net_tstamps.h.
 *
 * Copyright (C) 2004-2022 OKTET Labs Ltd. All rights reserved.
 */

#include "te_config.h"
#include "config.h"

#if HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif /* HAVE_SYS_TYPES_H */

#if HAVE_LINUX_NET_TSTAMP_H
#include <linux/net_tstamp.h>
#endif

#include "te_defs.h"
#include "te_rpc_defs.h"
#include "te_rpc_linux_net_tstamp.h"

#define HWTSTAMP_UNKNOWN 0xFFFF

/**
 * Solarflare Onload specific flag. It is hardcoded because Onload header
 * must not be included here, but the flag is needed here to be used in
 * functions recvmsg() and recvmmsg().
 */
#ifndef ONLOAD_SOF_TIMESTAMPING_STREAM
#define ONLOAD_SOF_TIMESTAMPING_STREAM (1 << 23)
#endif

/** Temporary hack: define flags which have been added in recent linux
 * versions.  */
#ifndef SOF_TIMESTAMPING_OPT_ID
#define SOF_TIMESTAMPING_OPT_ID (1<<7)
#endif
#ifndef SOF_TIMESTAMPING_TX_SCHED
#define SOF_TIMESTAMPING_TX_SCHED (1<<8)
#endif
#ifndef SOF_TIMESTAMPING_TX_ACK
#define SOF_TIMESTAMPING_TX_ACK (1<<9)
#endif
#ifndef SOF_TIMESTAMPING_OPT_CMSG
#define SOF_TIMESTAMPING_OPT_CMSG (1<<10)
#endif
#ifndef SOF_TIMESTAMPING_OPT_TSONLY
#define SOF_TIMESTAMPING_OPT_TSONLY (1<<11)
#endif

unsigned int
hwtstamp_instr_rpc2h(unsigned flags)
{
#if HAVE_LINUX_NET_TSTAMP_H
    if ((flags & ~RPC_SOF_TIMESTAMPING_MASK) != 0 &&
        (flags & RPC_ONLOAD_SOF_TIMESTAMPING_STREAM) == 0)
        return HWTSTAMP_UNKNOWN;

    return (!!(flags & RPC_SOF_TIMESTAMPING_TX_HARDWARE) *
              SOF_TIMESTAMPING_TX_HARDWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_TX_SOFTWARE) *
              SOF_TIMESTAMPING_TX_SOFTWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_RX_HARDWARE) *
              SOF_TIMESTAMPING_RX_HARDWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_RX_SOFTWARE) *
              SOF_TIMESTAMPING_RX_SOFTWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_SOFTWARE) *
              SOF_TIMESTAMPING_SOFTWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_SYS_HARDWARE) *
              SOF_TIMESTAMPING_SYS_HARDWARE)
           | (!!(flags & RPC_SOF_TIMESTAMPING_RAW_HARDWARE) *
              SOF_TIMESTAMPING_RAW_HARDWARE)
#ifdef SOF_TIMESTAMPING_OPT_ID
           | (!!(flags & RPC_SOF_TIMESTAMPING_OPT_ID) *
              SOF_TIMESTAMPING_OPT_ID)
#endif
#ifdef SOF_TIMESTAMPING_TX_SCHED
           | (!!(flags & RPC_SOF_TIMESTAMPING_TX_SCHED) *
              SOF_TIMESTAMPING_TX_SCHED)
#endif
#ifdef SOF_TIMESTAMPING_TX_ACK
           | (!!(flags & RPC_SOF_TIMESTAMPING_TX_ACK) *
              SOF_TIMESTAMPING_TX_ACK)
#endif
#ifdef SOF_TIMESTAMPING_OPT_CMSG
           | (!!(flags & RPC_SOF_TIMESTAMPING_OPT_CMSG) *
              SOF_TIMESTAMPING_OPT_CMSG)
#endif
#ifdef  SOF_TIMESTAMPING_OPT_TSONLY
           | (!!(flags & RPC_SOF_TIMESTAMPING_OPT_TSONLY) *
              SOF_TIMESTAMPING_OPT_TSONLY)
#endif
           | (!!(flags & RPC_ONLOAD_SOF_TIMESTAMPING_STREAM) *
              ONLOAD_SOF_TIMESTAMPING_STREAM)
           ;
#else
       return HWTSTAMP_UNKNOWN;
#endif
}

unsigned int
hwtstamp_instr_h2rpc(unsigned int flags)
{
#if HAVE_LINUX_NET_TSTAMP_H
    if ((flags & ~SOF_TIMESTAMPING_MASK) != 0 &&
        (flags & ONLOAD_SOF_TIMESTAMPING_STREAM) == 0)
        return HWTSTAMP_UNKNOWN;

    return (!!(flags & SOF_TIMESTAMPING_TX_HARDWARE) *
            RPC_SOF_TIMESTAMPING_TX_HARDWARE)
           | (!!(flags & SOF_TIMESTAMPING_TX_SOFTWARE) *
              RPC_SOF_TIMESTAMPING_TX_SOFTWARE)
           | (!!(flags & SOF_TIMESTAMPING_RX_HARDWARE) *
              RPC_SOF_TIMESTAMPING_RX_HARDWARE)
           | (!!(flags & SOF_TIMESTAMPING_RX_SOFTWARE) *
              RPC_SOF_TIMESTAMPING_RX_SOFTWARE)
           | (!!(flags & SOF_TIMESTAMPING_SOFTWARE) *
              RPC_SOF_TIMESTAMPING_SOFTWARE)
           | (!!(flags & SOF_TIMESTAMPING_SYS_HARDWARE) *
              RPC_SOF_TIMESTAMPING_SYS_HARDWARE)
           | (!!(flags & SOF_TIMESTAMPING_RAW_HARDWARE) *
              RPC_SOF_TIMESTAMPING_RAW_HARDWARE)
#ifdef SOF_TIMESTAMPING_OPT_ID
           | (!!(flags & SOF_TIMESTAMPING_OPT_ID) *
              RPC_SOF_TIMESTAMPING_OPT_ID)
#endif
#ifdef SOF_TIMESTAMPING_TX_SCHED
           | (!!(flags & SOF_TIMESTAMPING_TX_SCHED) *
              RPC_SOF_TIMESTAMPING_TX_SCHED)
#endif
#ifdef SOF_TIMESTAMPING_TX_ACK
           | (!!(flags & SOF_TIMESTAMPING_TX_ACK) *
              RPC_SOF_TIMESTAMPING_TX_ACK)
#endif
#ifdef SOF_TIMESTAMPING_OPT_CMSG
           | (!!(flags & SOF_TIMESTAMPING_OPT_CMSG) *
              RPC_SOF_TIMESTAMPING_OPT_CMSG)
#endif
#ifdef  SOF_TIMESTAMPING_OPT_TSONLY
           | (!!(flags & SOF_TIMESTAMPING_OPT_TSONLY) *
              RPC_SOF_TIMESTAMPING_OPT_TSONLY)
#endif
           | (!!(flags & ONLOAD_SOF_TIMESTAMPING_STREAM) *
              RPC_ONLOAD_SOF_TIMESTAMPING_STREAM)
           ;
#else
       return HWTSTAMP_UNKNOWN;
#endif
}

int
hwtstamp_tx_types_rpc2h(rpc_hwtstamp_tx_types type)
{
    switch(type)
    {
        RPC2H_CHECK_DECL(HWTSTAMP_TX_OFF);
        RPC2H_CHECK_DECL(HWTSTAMP_TX_ON);
        RPC2H_CHECK_DECL(HWTSTAMP_TX_ONESTEP_SYNC);
        RPC2H_CHECK_DECL(HWTSTAMP_TX_ONESTEP_P2P);

        default: return -1;
    }
}

rpc_hwtstamp_tx_types
hwtstamp_tx_types_h2rpc(int type)
{
    switch (type)
    {
        H2RPC_CHECK_DECL(HWTSTAMP_TX_OFF);
        H2RPC_CHECK_DECL(HWTSTAMP_TX_ON);
        H2RPC_CHECK_DECL(HWTSTAMP_TX_ONESTEP_SYNC);
        H2RPC_CHECK_DECL(HWTSTAMP_TX_ONESTEP_P2P);

        default:
            return RPC_HWTSTAMP_TX_UNKNOWN;
    }
}

const char *
hwtstamp_tx_types_rpc2str(rpc_hwtstamp_tx_types type)
{
    switch(type)
    {
        RPC2STR(HWTSTAMP_TX_OFF);
        RPC2STR(HWTSTAMP_TX_ON);
        RPC2STR(HWTSTAMP_TX_ONESTEP_SYNC);
        RPC2STR(HWTSTAMP_TX_ONESTEP_P2P);

        default:
            return "<UNKNOWN>";
    }
}

int
hwtstamp_rx_filters_rpc2h(rpc_hwtstamp_rx_filters filter)
{
    switch(filter)
    {
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_NONE);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_ALL);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_SOME);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_EVENT);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_SYNC);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_EVENT);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_SYNC);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_EVENT);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_SYNC);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_EVENT);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_SYNC);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_DELAY_REQ);
        RPC2H_CHECK_DECL(HWTSTAMP_FILTER_NTP_ALL);

        default: return -1;
    }
}

rpc_hwtstamp_rx_filters
hwtstamp_rx_filters_h2rpc(int filter)
{
    switch (filter)
    {
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_NONE);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_ALL);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_SOME);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_EVENT);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_SYNC);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_EVENT);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_SYNC);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_EVENT);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_SYNC);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_EVENT);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_SYNC);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_PTP_V2_DELAY_REQ);
        H2RPC_CHECK_DECL(HWTSTAMP_FILTER_NTP_ALL);

        default:
            return RPC_HWTSTAMP_FILTER_UNKNOWN;
    }
}

const char *
hwtstamp_rx_filters_rpc2str(rpc_hwtstamp_rx_filters filter)
{
    switch (filter)
    {
        RPC2STR(HWTSTAMP_FILTER_NONE);
        RPC2STR(HWTSTAMP_FILTER_ALL);
        RPC2STR(HWTSTAMP_FILTER_SOME);
        RPC2STR(HWTSTAMP_FILTER_PTP_V1_L4_EVENT);
        RPC2STR(HWTSTAMP_FILTER_PTP_V1_L4_SYNC);
        RPC2STR(HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L4_EVENT);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L4_SYNC);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L2_EVENT);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L2_SYNC);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_EVENT);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_SYNC);
        RPC2STR(HWTSTAMP_FILTER_PTP_V2_DELAY_REQ);
        RPC2STR(HWTSTAMP_FILTER_NTP_ALL);

        default:
            return "<UNKNOWN>";
    }
}

/*
 * Type of pointer to function converting HWTSTAMP_* native value
 * to the corresponding RPC value
 */
typedef int (*conv_func)(int h_val);

/* Convert native HWTSTAMP* flags to RPC ones. */
static unsigned int
flags_h2rpc_gen(unsigned int flags, conv_func func)
{
    unsigned int result = 0;
    int i;

    for (i = 0; i < 32; i++)
    {
        if (flags & (1 << i))
            result |= (1 << func(i));
     }

    return result;
}

unsigned int
hwtstamp_tx_types_flags_h2rpc(unsigned int flags)
{
    return flags_h2rpc_gen(flags, (conv_func)&hwtstamp_tx_types_h2rpc);
}

unsigned int
hwtstamp_rx_filters_flags_h2rpc(unsigned int flags)
{
    return flags_h2rpc_gen(flags, (conv_func)&hwtstamp_rx_filters_h2rpc);
}

te_errno
hwtstamp_tx_types_flags_rpc2te_str(unsigned int flags, te_string *str)
{
#define CHECK_FLAG(_name) \
    do {                                                              \
        rpc_hwtstamp_tx_types _type;                                  \
                                                                      \
        _type = RPC_HWTSTAMP_TX_ ## _name;                            \
        if (flags & (1 << _type))                                     \
        {                                                             \
            rc = te_string_append(str, "%s%s",                        \
                                  (flag_added ? " | " : ""),          \
                                  hwtstamp_tx_types_rpc2str(_type));  \
            if (rc != 0)                                              \
                return rc;                                            \
                                                                      \
            flag_added = TRUE;                                        \
        }                                                             \
    } while (0)

    te_bool flag_added = FALSE;
    te_errno rc;

    CHECK_FLAG(OFF);
    CHECK_FLAG(ON);
    CHECK_FLAG(ONESTEP_SYNC);
    CHECK_FLAG(ONESTEP_P2P);
    CHECK_FLAG(UNKNOWN);

    if (!flag_added)
        return te_string_append(str, "0");

    return 0;
#undef CHECK_FLAG
}

te_errno
hwtstamp_rx_filters_flags_rpc2te_str(unsigned int flags, te_string *str)
{
#define CHECK_FLAG(_name) \
    do {                                                                  \
        rpc_hwtstamp_rx_filters _filter;                                  \
                                                                          \
        _filter = RPC_HWTSTAMP_FILTER_ ## _name;                          \
        if (flags & (1 << _filter))                                       \
        {                                                                 \
            rc = te_string_append(str, "%s%s",                            \
                                  (flag_added ? " | " : ""),              \
                                  hwtstamp_rx_filters_rpc2str(_filter));  \
            if (rc != 0)                                                  \
                return rc;                                                \
                                                                          \
            flag_added = TRUE;                                            \
        }                                                                 \
    } while (0)

    te_bool flag_added = FALSE;
    te_errno rc;

    CHECK_FLAG(NONE);
    CHECK_FLAG(ALL);
    CHECK_FLAG(SOME);
    CHECK_FLAG(PTP_V1_L4_EVENT);
    CHECK_FLAG(PTP_V1_L4_SYNC);
    CHECK_FLAG(PTP_V1_L4_DELAY_REQ);
    CHECK_FLAG(PTP_V2_L4_EVENT);
    CHECK_FLAG(PTP_V2_L4_SYNC);
    CHECK_FLAG(PTP_V2_L4_DELAY_REQ);
    CHECK_FLAG(PTP_V2_L2_EVENT);
    CHECK_FLAG(PTP_V2_L2_SYNC);
    CHECK_FLAG(PTP_V2_L2_DELAY_REQ);
    CHECK_FLAG(PTP_V2_EVENT);
    CHECK_FLAG(PTP_V2_SYNC);
    CHECK_FLAG(PTP_V2_DELAY_REQ);
    CHECK_FLAG(NTP_ALL);
    CHECK_FLAG(UNKNOWN);

    if (!flag_added)
        return te_string_append(str, "0");

    return 0;
#undef CHECK_FLAG
}
