#!/usr/bin/perl

use strict;
use warnings;
use File::Temp qw/ tempfile /;

my $trc_to_move = "tmp_trc_db.xml";
my $conf_dir = "trc";
my $conf_root = "trc.xml";

foreach my $arg (@ARGV)
{
    if ($arg =~ m/^--conf-dir=(.+)/)
    {
        $conf_dir = $1;
    }
    elsif ($arg =~ m/^--conf-root=(.+)/)
    {
        $conf_root = $1;
    }
    else
    {
        $trc_to_move = $arg;
    }
}

sub rem_exc_attrs
{
    my $str = $_[0];

    $str =~ s/\s*pos=\".*\"\s*>/>/;
    $str =~ s/\s*pos=\".*\"\s*/ /;
    $str =~ s/\s*user_attr=\".*\"\s*>/>/;
    $str =~ s/\s*user_attr=\".*\"\s*/ /;

    return $str;
}

# Returns 1 if positions are the same;
# 2 if positions have the same depth (length)
# and are different only in the last item;
# 0 in all other cases.
sub file_pos_cmp
{
    my $pos1 = $_[0];
    my $pos2 = $_[1];
    my $i;

    return 0 if ($#$pos1 != $#$pos2);

    for ($i = 0; $i <= $#$pos1; $i++)
    {
        if ($$pos1[$i] != $$pos2[$i])
        {
            return 2 if ($i == $#$pos1);
            return 0;
        }
    }

    return 1;
}

sub replace_test
{
    my $fh_tmp = $_[0];
    my $replace_str = $_[1];
    my $s_num_old = $_[2];
    my $first_line = $_[3];
    my $last_line = $_[4];
    my $space_diff = 0;
    my $i;
    my $expr;
    my $arg_on = 0;

    $$replace_str[0] =~ m/^(\s*)/;
    my $s_num_new = length($1);
    $space_diff = $s_num_old - $s_num_new;

    $$replace_str[0] =~ s/^\s*//;
    $$replace_str[0] = $first_line.$$replace_str[0];

    for ($i = 1; $i <= $#$replace_str;
         $i++)
    {
        if ($arg_on == 0)
        {
            if ($space_diff > 0)
            {
                $expr = ' 'x$space_diff;
                $$replace_str[$i] =~ s/^/$expr/;
                $$replace_str[$i] =~
                            s/\n(.+)/\n$expr$1/g;
            }
            elsif ($space_diff < 0)
            {
                $expr = ' 'x(-$space_diff);
                $$replace_str[$i] =~ s/^$expr//;
                $$replace_str[$i] =~ s/\n$expr/\n/g;
            }
        }

        if ($$replace_str[$i] =~
                m/\s*<arg\s*name\s*=\s*\".*\"\s*>.*$/)
        {
            $arg_on = 1;
        }
        if ($$replace_str[$i] =~ m/^.*<\/arg>\s*$/)
        {
            $arg_on = 0;
        }
    }

    $$replace_str[$#$replace_str] =
              $$replace_str[$#$replace_str].$last_line;

    print $fh_tmp join("", @$replace_str);

}

sub test_find_replace
{
    my $filename = $_[0];
    my $testname = $_[1];
    my $testpos = $_[2];
    my $replace_str = $_[3];
    my $replace_mode = 1;
    my $temp_file;
    my @file_names = ();
    my $cur_file;
    my $fh;
    my $fh_tmp;
    my $was_replaced = 0;

    if (!defined($testname) || length($testname) == 0)
    {
        print "Moving generated TRC XML to TRC DB...\n";
        $replace_mode = 0;
        $cur_file = {
            'file' => $conf_root,
            'pos' => [],
        };
    }
    else
    {
        $cur_file = {
            'file' => $filename,
            'pos' => [0],
        };
        (undef, $temp_file) = tempfile("tmp-trc-XXXX");
        open($fh_tmp, ">".$temp_file);
    }

    push(@file_names, $cur_file);

    open($fh, "<", $filename);

    while (<$fh>)
    {
        my $str = $_;
        my $test_pattern = "^(.*)<test\\s*name\\s*=\\s*\"([^\"]*)\"".
                           "\\s*type\\s*=\\s*\"([^\"]*)\".*?".
                           "(pos\\s*=\\s*\"([^\"]*)\"\\s*)?>.*\$";

        my $iter_pattern = "^.*<iter\\s*result\\s*=\\s*\"([^\"]*)\".*?".
                           "(\\s*user_attr\\s*=\\s*\"([^\"]*)\")?\\s*".
                           "(pos\\s*=\\s*\"([^\"]*)\"\\s*)?>.*\$";

        if ($str =~
                m/^\s*<xinclude_start\s*href\s*=\s*\"([^\"]*)\".*>\s*$/)
        {
            $cur_file = {
                'filename' => $1,
                'pos' => [],
            };

            push(@file_names, $cur_file);
        }
        if ($str =~ m/\s*<xinclude_end\/>\s*$/)
        {
            pop(@file_names);
            $cur_file = $file_names[$#file_names];
        }

        if ($str =~ m/$iter_pattern/)
        {
            if ($replace_mode == 0)
            {
                push(@{$$cur_file{'pos'}}, $5);
            }
            else
            {
                ${$$cur_file{'pos'}}[$#{$$cur_file{'pos'}}]++;
                push(@{$$cur_file{'pos'}}, 0);
            }
        }

        if ($str =~ m/$test_pattern/)
        {
            my $first_line = $1;
            my $last_line;
            my $name = $2;
            my $type = $3;
            my $aux_str;

            push(@{$$cur_file{'pos'}}, $5) if $replace_mode == 0;
            ${$$cur_file{'pos'}}[$#{$$cur_file{'pos'}}]++
                                            if $replace_mode == 1;

            if ($type eq "script")
            {
                if ($replace_mode == 0)
                {
                    push(@$replace_str, rem_exc_attrs($str));

                    while(<$fh>)
                    {
                        $aux_str = $_;
                        if ($aux_str =~ m/^\s*<iter\s*/)
                        {
                            $aux_str = rem_exc_attrs($aux_str);
                        }
                        push(@$replace_str, $aux_str);
                        last if ($aux_str =~ m/^\s*<\/test\s*>\s*$/);
                    }

                    test_find_replace($conf_dir."/".$$cur_file{'filename'},
                                      $name,
                                      $$cur_file{'pos'},
                                      $replace_str);
                    pop(@{$$cur_file{'pos'}});
                    $replace_str = [];
                }
                else
                {
                    if ($name eq $testname &&
                        file_pos_cmp($$cur_file{'pos'},
                                     \@$testpos) == 1)
                    {
                        my $s_num_old = length($first_line);

                        while(<$fh>)
                        {
                            $aux_str = $_;
                            if ($aux_str =~ m/^\s*<\/test\s*>(.*)$/)
                            {
                                $last_line = $1;
                                last;
                            }
                        }

                        replace_test($fh_tmp, $replace_str, $s_num_old,
                                     $first_line, $last_line);
                        $was_replaced = 1;
                    }
                    else
                    {
                        push(@{$$cur_file{'pos'}}, 0);
                        print $fh_tmp $str;
                    }
                }
            }
            else
            {
                if ($replace_mode == 1)
                {
                    push(@{$$cur_file{'pos'}}, 0);
                    print $fh_tmp $str if ($replace_mode == 1);
                }
            }
        }
        else
        {
            if ($str =~ m/(.*)<\/iter>.*$/)
            {
                my $s_num_old = length($1) + 2;
                if (file_pos_cmp($$cur_file{'pos'},
                                 \@$testpos) == 2 &&
                    $was_replaced == 0 && $replace_mode == 1)
                {
                    replace_test($fh_tmp, $replace_str, $s_num_old,
                                 ' 'x$s_num_old, "");
                }
                pop(@{$$cur_file{'pos'}});
            }

            print $fh_tmp $str if ($replace_mode == 1);
        }

        if ($str =~ m/.*<\/test>.*$/)
        {
            pop(@{$$cur_file{'pos'}});
        }
    }

    if ($replace_mode == 1)
    {
        rename $temp_file, $filename;
    }
}

test_find_replace($trc_to_move, "", [], []);

