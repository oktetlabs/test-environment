#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions GetOptionsFromString);
use File::Basename;

my $cgi_path = "";
my $cli_path = "";
my $def_test = "";
my $def_xml_log = "trc-log.bz2";
my $user = "";
my $group = "";
my $def_group_logs_by_tags = "";
my $test_path_example = "";
my $night_logs_http = "";
my $night_logs_path = "";
my $opts_parsed = 0;

my %args_descr = ( "opts=s" => \&parse_opts,
                   "help" => \&print_help);

sub print_help
{
    print
      "Deploying CGI scripts\n".
      "--opts=path    Specify file with installation options\n";

    exit(0);
}

sub parse_opts
{
    my ($name, $path) = @_;

    my $opts_str;

    $opts_str = `cat $path`;
    if (length($opts_str) == 0)
    {
        print "Failed to read installation options\n";
        exit(1);
    }

    if (!eval($opts_str))
    {
        print "Failed to parse installation options\n";
        exit(1);
    }

    $opts_parsed = 1;
}

if (!GetOptions(%args_descr))
{
    exit(1);
}

if ($opts_parsed == 0)
{
    print "Installation options were not specified\n";
    exit(1);
}

if (system("mkdir -p $cli_path") != 0 ||
    system("mkdir -p $cgi_path") != 0)
{
    die "Specified paths are not accessible";
}

sub escape_path
{
    my $path = $_[0];

    $path =~ s/\//\\\//g;
    return $path;
}

my %defs = ( "#USE_LIB" => "use lib \"".escape_path($cli_path)."\";",
             "CLI_PATH" => "\"".escape_path($cli_path)."\"",
             "DEF_TEST" => escape_path($def_test),
             "DEF_XML_LOG" => escape_path($def_xml_log),
             "DEF_GROUP_LOGS_BY_TAGS" =>
                          escape_path($def_group_logs_by_tags),
             "TEST_PATH_EXAMPLE" => escape_path($test_path_example),
             "NIGHT_LOGS_HTTP" => escape_path($night_logs_http),
             "NIGHT_LOGS_PATH" => escape_path($night_logs_path));

sub fix_script
{
    my $script = $_[0];

    foreach my $key (keys %defs)
    {
        if (system("sed -i 's/$key/".$defs{$key}."/g' $script") != 0)
        {
            die "Failed to replace $key in $script";
        }
    }
}

my %files = ( "$cgi_path" => [ "./cgi_scripts/form.html",
                               "./cgi_scripts/index.pl",
                               "./cgi_scripts/process_form.pl",
                               "./cgi_scripts/compromise.pl" ],
              "$cli_path" => [ "./cli_scripts/add_new_cache",
                               "./cli_scripts/te_get_nlogs_results",
                               "./cli_scripts/compromise_log",
                               "./cli_scripts/update_caches" ],
              "$cli_path/night_logs_cgi_aux/" =>
                  [ "./cli_scripts/night_logs_cgi_aux/aux_funcs.pm" ] );

my $rc;

foreach my $path (keys %files)
{
    if (system("mkdir -p $path") != 0 ||
        system("chown $user:$group $path") != 0 ||
        system("chmod 0750 $path") != 0)
    {
        die "Failed to set up $path";
    }

    foreach my $file (@{$files{$path}})
    {
        if (system("cp $file $path/") != 0 ||
            system("chown $user:$group $path/".basename($file)) != 0 ||
            system("chmod 0750 $path/".basename($file)) != 0)
        {
            die "Failed to install $file to $path";
        }

        fix_script($path."/".basename($file));
    }
}

exit(0);
