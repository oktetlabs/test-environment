#!/usr/bin/perl
#
# Test Environment: Testing Results Comparator
#
# Oktetlabs bugzilla page parser script
#
# Copyright (C) 2006 Test Environment authors (see file AUTHORS
# in the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
# 
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA  02111-1307  USA
#
# Author Alexander Kukuta <Alexander.Kukuta@oktetlabs.ru>
#
# $Id: $
#

my @bugs = ();

# Iterate through the list of Bug IDs
for my $bug_line (<STDIN>)
{
    #printf("Bug line: %s\n", $bug_line);
    if ($bug_line =~ m/OL (\d*):/i)
    {
        $bug_id = $1;
        $bug_tests = $';
        chomp $bug_tests;
    }
    else
    {
        last;
    }

    my $bug_url = "https://www.oktetlabs.ru/bugzilla3/show_bug.cgi?id=$bug_id";
    my $field = ();
    my %bug = ();

    #curl -s -u : --negotiate "${BUZILLA_URL}/show_bug.cgi?id=${bug_id}"
    for my $line (`curl -s -u : --negotiate \"$bug_url\"`)
    {
        # Parse BUG ID field
        if ($line =~ m/name=\"id\" value=\"(\d*)\"/i)
        {
            #printf("Id: %s\n", $1);
            $bug{'id'} = $1;
        }

        # Parse BUG Summary
        if ($line =~ m/short_desc_nonedit_display\"\>([\w|\s|.|,|:|;|-|_|\\|\/|]*)/i)
        {
            #printf("Summary: %s\n", $1);
            $bug{'summary'} = $1;
        }

        # Parse BUG Status
        if ($line =~ m/static_bug_status\"\>([\w| ]*)/i)
        {
            #printf("Status: %s\n", $1);
            $bug{'status'} = $1;
        }

        # Parse Selected options
        if ($line =~ m/select id=\"([\w|\s]*)\"/i)
        {
            #printf("Found %s select id\n", $1);
            $field = $1;
        }
        elsif ($line =~ m/select name=\"([\w|\s]*)\"/i)
        {
            #printf("Found %s select name\n", $1);
            $field = $1;
        }

        if (($line =~ m/option value=\"([\w|\s]*)\"\s*selected/i) or
            ($line =~ m/option selected value=\"([\w|\s]*)\"/i))
        {
            if ($field)
            {
                #printf("%s: %s\n", $field, $1);
                $bug{$field} = $1;
                $field = ();
            }
        }
    }

    my $test_links;
    for my $test_line (split(',', $bug_tests))
    {
        if ($test_line)
        {
            my ($test_name, $test_ref) = split('#', $test_line);
            $test_links .= "<a href=\"#$test_ref\">$test_name</a><br/>"
        }
    }
    #printf("%s\n", $test_links);

    $bug{'tests'} = $test_links;

    push(@bugs, {%bug});
}

# Sort bugs by ID, severity and priority
@bugs = sort {$a->{'id'} <=> $b->{'id'}} @bugs;
@bugs = sort {$a->{'bug_severity'} cmp $b->{'bug_severity'}} @bugs;
@bugs = sort {$a->{'priority'} cmp $b->{'priority'}} @bugs;

# Function returns text color due to bug priority
sub colorify
{
    my ($priority, $severity) = @_;
    my $color = "#000000";

    if (($priority eq 'P1') or
        (($severity eq 'blocker')) or
        (($severity eq 'critical')) or
        (($severity eq 'major')))
    {
        $color = "FF0000";
    }
    elsif (($priority eq 'P3') or
             ($priority eq 'P4') or
             ($priority eq 'P5') or
             (($severity eq 'minor')) or
             (($severity eq 'enhancement')))
    {
        $color = "0000FF";
    }

    return $color;
}

# Produce HTML output
printf("<table border=1 cellpadding=4 cellspacing=3>\n");
printf("  <tr>\n");
printf("    <td><b>Key</b></td>\n");
printf("    <td><b>Priority</b></td>\n");
printf("    <td><b>Severity</b></td>\n");
printf("    <td><b>Status</b></td>\n");
printf("    <td><b>Summary</b></td>\n");
printf("    <td><b>Product</b></td>\n");
printf("    <td><b>Component</b></td>\n");
printf("    <td><b>Tests</b></td>\n");
printf("  </tr>\n");

for my $b (@bugs)
{
    my $bug_url = "https://www.oktetlabs.ru/bugzilla3/show_bug.cgi?id=".$b->{'id'};
    printf("<a name=\"bug_ol_%s\"/>\n", $b->{'id'});

    printf("<tr style=\"color:#%s\">\n", colorify($b->{'priority'}, $b->{'bug_severity'}));
    printf("  <td><a href=%s>OL %s</a></td>\n", $bug_url, $b->{'id'});
    printf("  <td>%s</td>\n", $b->{'priority'});
    printf("  <td>%s</td>\n", $b->{'bug_severity'});
    printf("  <td>%s %s</td>\n", $b->{'bug_status'}, $b->{'resolution'});
    printf("  <td>%s</td>\n", $b->{'summary'});
    printf("  <td>%s</td>\n", $b->{'product'});
    printf("  <td>%s</td>\n", $b->{'component'});
    printf("  <td>%s</td>\n", $b->{'tests'});
    printf("</tr>\n");
}

printf("</table>\n");
