#!/usr/bin/perl

package BugParser::bug;
    use Data::Dumper;
    sub doReport {
        my $self = shift;
        push(@main::bugs, $self);
    }

package BugParser::Characters;
    sub doReport { }

package BugParser::bugs;
    sub doReport {
        my $self = shift;
        for $BugParser (@ { $self->{Kids} }) {
            $BugParser->doReport();
        }
    }

package main;

use strict;
use HTML::Entities;
use Getopt::Long;
use XML::Parser;
use Data::Dumper;

our @bugs = ();

my $title;
my @keywords_list = ();
GetOptions("title=s" => \$title,
           "keyword=s" => \@keywords_list);

my %keywords = ();
for my $keyw (@keywords_list)
{
    $keywords{$keyw} = 'TRUE';
}

# initialize parser and read the file
my $parser = new XML::Parser( Style => 'Objects', Pkg => 'BugParser' );

my %scripts = ();
my %tests_mapping = ();

# Iterate through the list of Bug IDs
for my $bug_line (<STDIN>)
{
    if ($bug_line =~ m/unspecified:/i)
    {
        my %bug_unspec = ();
        $bug_unspec{'id'} = 'unspecified';
        $bug_unspec{'summary'} = 'Unexpected test results without bug specified';
        $bug_unspec{'priority'} = 'unknown';
        $bug_unspec{'status'} = 'unknown';
        $bug_unspec{'project'} = 'unknown';
        my $bug_tests = $';
        chomp $bug_tests;
        $bug_unspec{'tests'} = $bug_tests;
        push(@bugs, \%bug_unspec);
    }
    elsif ($bug_line =~ m/(.*) ([\w\s\-\_\.]*):/i)
    {
        $scripts{$1} .= " $2";
        $tests_mapping{$2} = $';
    }
}

for my $script ( keys %scripts )
{
    my $cmd = $script . $scripts{$script};

    my $xml_doc = `$cmd`;
    if ($? == -1)
    {
        printf("Failed to execute CMD: $cmd\n");
        exit -1;
    }

    my $tree = $parser->parse($xml_doc);
    for (@$tree) { $_->doReport(); }
}

# Process list of tests related to each bug
for my $b (@bugs)
{
    if ($tests_mapping{$b->{'bug-id'}})
    {
        $b->{'tests'} = $tests_mapping{$b->{'bug-id'}};
    }

    my $test_links;
    for my $test_line (split(',', $b->{'tests'}))
    {
        if ($test_line)
        {
            chomp $test_line;

            my @ids;
            my ($test_name, $test_ref) = split('#', $test_line);
            if ($test_ref)
            {
                @ids = split('\|', $test_ref);
                $test_ref = $ids[0];
                $test_links .= "<a href=\"#$test_ref\">$test_name</a>";

                for (my $iter_no = 1; $iter_no <= $#ids; $iter_no++)
                {
                    if ($iter_no == 1)
                    {
                        $test_links .= "&nbsp;[";
                    }
                    else
                    {
                        if (($#ids > 5) and ($iter_no > 3) and ($iter_no < $#ids))
                        {
                            $test_links .= ",..." if ($iter_no == 4);
                            next;
                        }
                        $test_links .= ",";
                    }
                    $test_links .= "<a href=\"#iter_$ids[$iter_no]\">$iter_no</a>";
                }
                $test_links .= "]<br/>";
            }
            else
            {
                $test_links .= "$test_name<br/>";
            }
        }
    }
    $b->{'tests'} = $test_links;

    # Process keywords
    if ($b->{'tags'})
    {
        my $new_keywords = ();
        for my $bug_keyword (split(', ', $b->{'tags'}))
        {
            $bug_keyword = '<b>' . $bug_keyword . '</b>' if ($keywords{$bug_keyword});
            $new_keywords .= '<br/>' if ($new_keywords);
            $new_keywords .= $bug_keyword;
        }
        $b->{'tags'} = $new_keywords;
    }
}

# Sort bugs by ID, severity and priority
@bugs = sort {$a->{'id'} <=> $b->{'id'}} @bugs;
#@bugs = sort {$a->{'bug_severity'} cmp $b->{'bug_severity'}} @bugs;
@bugs = sort {$a->{'priority'} cmp $b->{'priority'}} @bugs;

# Function returns text color due to bug priority
sub colorify
{
    my ($priority, $status) = @_;
    my $color = "#000000";

    if ($status =~ m/(closed|resolved)/i)
    {
        $color = "#7F7F7F";
    }
    elsif ($priority =~ m/(P1|block|critic|major)/i)
    {
        $color = "#FF0000";
    }
    elsif ($priority =~ m/(P3|P4|P5|minor|enhance)/i)
    {
        $color = "#0000FF";
    }

    return $color;
}

# Produce HTML output
printf("<table border=1 cellpadding=4 cellspacing=3 style=\"font-size:small;\">\n");
printf("  <tr><td colspan=8 align=center><b>$title</b></td></tr>\n") if ($title);
printf("  <tr>\n");
printf("    <td><b>Key</b></td>\n");
printf("    <td><b>Tests</b></td>\n");
printf("    <td><b>Priority</b></td>\n");
printf("    <td><b>Status</b></td>\n");
printf("    <td><b>Summary</b></td>\n");
printf("    <td><b>Product: Component</b></td>\n");
printf("    <td><b>Keywords");
printf(":<br/>%s", join('<br/>', @keywords_list)) if (@keywords_list);
printf("</b></td>\n");
printf("  </tr>\n");

for my $b (@bugs)
{
    my $bug_url;

    printf("<tr style=\"color:%s\">\n", colorify($b->{'priority'}, $b->{'status'}));
    if ($b->{'id'} ne 'unspecified')
    {
        if ($b->{'url'})
        {
            printf("  <td><a name=\"bug_ol_%s\" href=%s>%s</a></td>\n", $b->{'id'}, $b->{'url'}, $b->{'bug-id'});
        }
        else
        {
            printf("  <td><a name=\"bug_ol_%s\">%s</a></td>\n", $b->{'id'}, $b->{'bug-id'});
        }
    }
    else
    {
        printf("  <td><a name=\"bug_unspecified\">Unspecified</a></td>\n");
    }
    printf("  <td>%s</td>\n", $b->{'tests'});
    printf("  <td>%s</td>\n", $b->{'priority'});

    printf("  <td>%s%s</td>\n", $b->{'status'},
           ($b->{'assigned-to'}) ? "<br/><a href=\"mailto:" .
            $b->{'assigned-mail'} . "\">" . $b->{'assigned-to'} . "</a>" : "");
    printf("  <td>%s</td>\n", $b->{'summary'});
    printf("  <td>%s%s%s</td>\n", $b->{'project'},
           ($b->{'components'}) ? ": " : "", $b->{'components'});
    printf("  <td>%s</td>\n", $b->{'tags'});
    printf("</tr>\n");
}

printf("</table>\n");
