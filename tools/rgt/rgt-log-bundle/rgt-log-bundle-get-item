#!/bin/bash

bundle_path=
req_path=
shared_url=
docs_url=

usage()
{
cat <<EOF
Usage: rgt-log-bundle-get-item [<options>]
  --bundle=PATH        Raw log bundle path
  --req-path=PATH      Path to HTML log to be obtained
  --shared-url=URL     URL of directory for shared files (images etc.)
  --docs-url=URL       URL of directory for test descriptions

EOF
}

while test -n "$1" ; do
    opt="$1"
    case "${opt}" in
        --help         )   usage ; exit 0 ;;
        --bundle=*     )   bundle_path="${opt#--bundle=}" ;;
        --req-path=*   )   req_path="${opt#--req-path=}" ;;
        --shared-url=* )   shared_url="${opt#--shared-url=}" ;;
        --docs-url=*   )   docs_url="${opt#--docs-url=}" ;;

                      *)   echo "Unknown option: ${opt}" >&2;
                           usage ;
                           exit 1 ;;
    esac

    shift 1
done

if test -z "${bundle_path}" -o -z "${req_path}" ; then
    echo "Not all the required arguments were specified" >&2
    exit 1
fi

bundle_tmpdir=$(mktemp -d "/tmp/raw_log_bundle_XXXXXX")
if test $? -ne 0 ; then
    echo "Failed to create temporary directory" >&2
    exit 1
fi

cleanup()
{
    if test -n "${bundle_tmpdir}" ; then
        rm -r "${bundle_tmpdir}"
    fi
}

err_cleanup()
{
    echo "$1" >&2
    cleanup
    exit 1
}

mkdir -p "${bundle_tmpdir}/fragments"
if test $? -ne 0 ; then
    err_cleanup "Failed to create subdir in ${bundle_tmpdir}"
fi

if [[ "${req_path}" =~ log_gist[.]raw$ ]] ; then
    pixz -x log_gist.raw <"${bundle_path}" | tar -x -O >"${req_path}"
    if test $? -ne 0 ; then
        err_cleanup "Failed to extract log_gist.raw"
    fi

elif [[ "${req_path}" =~ log[.]raw$ ]] ; then

    rgt-log-bundle-get-original --bundle="${bundle_path}" \
        --output="${req_path}"
    if test $? -ne 0 ; then
        err_cleanup "Failed to recover original raw log"
    fi

elif [[ "${req_path}" =~ log[.]txt$ ]] ; then

    rgt-log-bundle-get-original --bundle="${bundle_path}" \
        --output="${bundle_tmpdir}/recovered_log.raw"
    if test $? -ne 0 ; then
        err_cleanup "Failed to recover original raw log"
    fi

    rgt-conv --no-cntrl-msg --incomplete-log \
        -f "${bundle_tmpdir}/recovered_log.raw" \
        -o "${bundle_tmpdir}/recovered_log.xml"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain XML log"
    fi

    rgt-xml2text -f "${bundle_tmpdir}/recovered_log.xml" \
        -o "${req_path}"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain TXT log"
    fi

elif [[ "${req_path}" =~ /html[/]?$ ||
        "${req_path}" =~ ^html[/]?$ ]] ; then

    pixz -x log_gist.raw <"${bundle_path}" | tar x -C \
        "${bundle_tmpdir}/fragments/"
    if test $? -ne 0 ; then
        err_cleanup "Failed to extract log_gist.raw"
    fi

    rgt-conv --incomplete-log "${bundle_tmpdir}/fragments/log_gist.raw" \
        "${bundle_tmpdir}/log_gist.xml"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain log_gist.xml"
    fi

    rgt-xml2html-multi --index-only --shared-url="${shared_url}" \
        --docs-url="${docs_url}" \
        "${bundle_tmpdir}/log_gist.xml" "${req_path}"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain html log tree"
    fi

elif [[ "${req_path}" =~ node_[^/]*[.]html$ ]] ; then

    cur_page=1
    all_pages=0
    pages_count=0
    merge_frag_num=0
    frags_str=

    shopt -s extglob

    node="${req_path##*/}"
    node="${node#node_}"
    node="${node%.html}"

    if [[ "${node}" =~ ^([0-9]+)_([0-9]+) ]] ; then
        filter_depth="${BASH_REMATCH[1]}"
        filter_seq="${BASH_REMATCH[2]}"
    elif [[ "${node}" =~ ^([0-9]+) ]] ; then
        filter_tin="${BASH_REMATCH[1]}"
    else
        err_cleanup "Cannot obtain \"${req_path}\""
    fi

    if [[ "${node}" =~ _p([0-9]+)$ ]] ; then
        cur_page="${BASH_REMATCH[1]}"
        node="${node%%_p+([0-9])}"
    fi
    if [[ "${node}" =~ _all$ ]] ; then
        all_pages=1
        node="${node%_all}"
    fi

    pixz -x log_gist.raw frags_list <"${bundle_path}" |\
        tar x -C "${bundle_tmpdir}/fragments/"
    if test $? -ne 0 ; then
        err_cleanup "Failed to extract log_gist.raw and frags_list"
    fi

    while read frag_name frag_tin frag_depth frag_seq \
          frag_len frag_start_len frag_pages_cnt || \
          [[ -n "${frag_name}" ]] ; do

        if test -n "${frag_pages_cnt}" ; then

            if test \( -n "${filter_tin}" \
                       -a x"${filter_tin}" = x"${frag_tin}" \) -o \
                    \( -n "${filter_depth}" \
                       -a x"${filter_depth}" = x"${frag_depth}" \
                       -a -n "${filter_seq}" \
                       -a x"${filter_seq}" = x"${frag_seq}" \) ; then

                pages_count="${frag_pages_cnt}"

                if test ${pages_count} -gt 0 ; then
                    frag_name="${frag_name/%_start/_inner}"
                    if test ${all_pages} -gt 0 ; then
                        for ((i = 0 ; i < pages_count ; i++)) ; do
                            frags_str="${frags_str} ${frag_name}_$i"
                        done
                    else
                        frags_str="${frag_name}_$(($cur_page - 1))"
                    fi
                fi

                break
            fi
        fi

    done <"${bundle_tmpdir}/fragments/frags_list"

    if test -n "${frags_str}" ; then
        pixz -x ${frags_str} <"${bundle_path}" |\
            tar x -C "${bundle_tmpdir}/fragments/"
        if test $? -ne 0 ; then
            err_cleanup "Failed to extract log fragments"
        fi
    fi

    if test ${all_pages} -gt 0 ; then
        merge_frag_num=all
    else
        merge_frag_num=$((cur_page - 1))
    fi

    rgt-log-merge --split-log="${bundle_tmpdir}/fragments/" \
        --filter="${node}" --page="${merge_frag_num}" \
        --output="${bundle_tmpdir}/log_merge.raw"
    if test $? -ne 0 ; then
        err_cleanup "Failed to merge log fragments"
    fi

    rgt-conv --incomplete-log "${bundle_tmpdir}/log_merge.raw" \
        "${bundle_tmpdir}/log_merge.xml"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain merged XML log"
    fi

    page_selector=
    if test ${all_pages} -gt 0 ; then
        page_selector="--page-selector=all"
    elif test ${pages_count} -gt 1 ; then
        page_selector="--page-selector=${cur_page}/${pages_count}"
    fi
    dir_path=$(dirname "${req_path}")

    rgt-xml2html-multi --single-node="${node}" \
        --shared-url="${shared_url}" \
        --docs-url="${docs_url}" ${page_selector} \
        "${bundle_tmpdir}/log_merge.xml" "${dir_path}"
    if test $? -ne 0 ; then
        err_cleanup "Failed to obtain HTML log"
    fi

else
    err_cleanup "Unknown target type in \"${req_path}\""
fi

cleanup
exit 0
