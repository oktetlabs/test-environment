--- /tmp/linux-2.6.8.1/drivers/net/dl2k.c	2004-08-14 14:55:19.000000000 +0400
+++ dl2k.c	2006-09-02 13:30:09.000000000 +0400
@@ -93,6 +93,7 @@
 static int max_intrloop = 50;
 static int multicast_filter_limit = 0x40;

+void qdisc_run(struct net_device *dev);
 static int rio_open (struct net_device *dev);
 static void rio_timer (unsigned long data);
 static void rio_tx_timeout (struct net_device *dev);
@@ -171,6 +172,7 @@
 	np = dev->priv;
 	np->chip_id = chip_idx;
 	np->pdev = pdev;
+        np->ignore_crc_err = 0;
 	spin_lock_init (&np->tx_lock);
 	spin_lock_init (&np->rx_lock);

@@ -650,7 +652,8 @@
 	if (skb->ip_summed == CHECKSUM_HW) {
 		txdesc->status |=
 		    cpu_to_le64 (TCPChecksumEnable | UDPChecksumEnable |
-				 IPChecksumEnable);
+				 IPChecksumEnable | (FCSAppendDisable &
+                                                     np->ignore_crc_err));
 	}
 #endif
 	if (np->vlan) {
@@ -670,11 +673,15 @@
 		txdesc->status = cpu_to_le64 (entry | tfc_vlan_tag |
 					      WordAlignDisable |
 					      TxDMAIndicate |
-					      (1 << FragCountShift));
+					      (1 << FragCountShift) |
+                                              (FCSAppendDisable &
+                                                     np->ignore_crc_err));
 	else
 		txdesc->status = cpu_to_le64 (entry | tfc_vlan_tag |
 					      WordAlignDisable |
-					      (1 << FragCountShift));
+					      (1 << FragCountShift) |
+                                              (FCSAppendDisable &
+                                                     np->ignore_crc_err));

 	/* TxDMAPollNow */
 	writel (readl (ioaddr + DMACtrl) | 0x00001000, ioaddr + DMACtrl);
@@ -1323,20 +1330,19 @@
 static int
 rio_ioctl (struct net_device *dev, struct ifreq *rq, int cmd)
 {
+        int i;
 	int phy_addr;
 	struct netdev_private *np = dev->priv;
 	struct mii_data *miidata = (struct mii_data *) &rq->ifr_ifru;
 	
-	struct netdev_desc *desc;
-	int i;
+        struct netdev_desc *desc;

 	phy_addr = np->phy_addr;
 	switch (cmd) {
 	case SIOCETHTOOL:
 		return rio_ethtool_ioctl(dev, rq->ifr_data);		
 	case SIOCDEVPRIVATE:
-		break;
-	
+    		break;	
 	case SIOCDEVPRIVATE + 1:
 		miidata->out_value = mii_read (dev, phy_addr, miidata->reg_num);
 		break;
@@ -1374,7 +1380,21 @@
 		}
 		printk ("\n");
 		break;
-
+        case SIOCDEVPRIVATE + 9:
+            spin_lock(&dev->queue_lock);
+            qdisc_run(dev);
+            spin_unlock(&dev->queue_lock);
+            np->ignore_crc_err = 0;
+            printk(KERN_INFO "The mode of ignoring CRC errors is off.\n");
+            break;
+	case SIOCDEVPRIVATE + 10:
+            spin_lock(&dev->queue_lock);
+            qdisc_run(dev);
+            spin_unlock(&dev->queue_lock);
+            np->ignore_crc_err = 1;
+            printk(KERN_INFO "The mode of ignoring CRC errors is on.\n");
+            break;
+
 	default:
 		return -EOPNOTSUPP;
 	}
