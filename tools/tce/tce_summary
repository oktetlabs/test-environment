#! /bin/sh
#
# Test Coverage Estimation
#
# Script to generate HTML representation of the TCE report
#
#
# Copyright (C) 2005 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
#
#
# Author: Artem V. Andreev <Artem.Andreev@oktetlabs.ru>
#
# $Id$
#

usage ()
{
    cat >&2 <<EOF
USAGE: tce_summary <log-file-name> [<options>...] [<output-file>]
Converts a TCE log into HTML form. If <output-file> is not given,
standard output is assumed.

Options:
--datadir=<directory>  If given, <output-file> will only contain
                        an index of files, actual annotated sources
                        being placed into <directory>, one file per source
--map-file=<mapfile>   The name of a file containing name-to-module map
--modules=<modulename> The comma-separated list of modules 
                       to measure coverage of
                       ("-" denotes user-land code)
--sort-by=<MODE>       The mode of sorting the index of files:
                            branches  by covered branches percentage
                                      (the default)
                            lines     by covered lines percentage
                            sources   by filename
                            modules   by module

EOF
exit 0
}

outputfile="/dev/stdout"
sortmode='sort -k3,3g -k4,4nr'
for arg; do
    case "$arg" in
        --datadir=*) datadir="${arg#--datadir=}/"; mkdir -p "$datadir"
            ;;
        --sort-by=branches) sortmode='sort -k3,3g -k4,4nr' ;;
        --sort-by=lines) sortmode='sort -k1,1g -k2,2nr' ;;
        --sort-by=sources) sortmode='sort -k6,6' ;;
        --sort-by=modules) sortmode='sort -k5,5 -k6,6' ;;
        --map-file=*) mapfile=${arg#--map-file=} ;;
        --modules=*)  modules=${arg#--modules=} ;;
        --help) usage ;;
        --*) echo "Unrecognized option $arg" >&2; usage; exit 1 ;;
        *)
        if test -z "$sourcefile"; then
            sourcefile="$arg"
        else
            outputfile="$arg"
        fi
        ;;
    esac
done

if test -z "$sourcefile"; then
    echo "Log file name must be given" >&2
    usage
    exit 1
fi

if test -z "$modules" -a -n "$mapfile"; then
    modules=`awk '{ print $2; }' $mapfile | sort | uniq`
fi

cat >$outputfile <<EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=utf-8">
  <TITLE>TCE Summary</TITLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H1 ALIGN=CENTER>TCE Summary</H1>
`tce_count $sourcefile '^branch[[:space:]]*[0-9]+ (never executed|taken 0)' \
    '^branch[[:space:]]*[0-9]+ taken[[:space:]]*[1-9][0-9]*' |
(
    read ratio sum
    echo "<H2>Grand Total: $ratio% of $sum branches covered</H2>" 
)
tce_count $sourcefile '^[[:space:]]*#+:' '^[[:space:]]*[0-9]+:' |
(
    read ratio sum
    echo "<H2>Grand Total: $ratio% of $sum lines covered</H2>" 
)
`
<TABLE BORDER=1 CELLPADDING=4 CELLSPACING=3>
<TH>Module</TH>
<TH> % of taken branches</TH>
<TH> % of executed lines</TH>
`for m in $modules; do
echo "<TR><TD>$m</TD>"
awk "/^=== .* $m\$/, /^=====/ { print }" $sourcefile |
tce_count - '^branch[[:space:]]*[0-9]+ (never executed|taken 0)' \
    '^branch[[:space:]]*[0-9]+ taken[[:space:]]*[1-9][0-9]*' | 
(
    read ratio sum
    echo "<TD>$ratio% of $sum</TD>" 
)
awk "/^=== .* $m\$/, /^=====/ { print }" $sourcefile |
tce_count - '^[[:space:]]*#+:' '^[[:space:]]*[0-9]+:' |
(
    read ratio sum
    echo "<TD>$ratio% of $sum</TD>" 
)
done
`
</TABLE>
<TABLE BORDER=1 CELLPADDING=4 CELLSPACING=3>
<TH>% of taken branches</TH>
<TH>Total branches</TH>
<TH>% of executed lines</TH>
<TH>Total lines</TH>
<TH>Module</TH>
<TH>Source file</TH>

EOF

if test -z "$modules"; then
    modulefilter="{ print }"
else
    m=`echo $modules | sed 's/^[[:space:]]*//
                            s/[[:space:]]*$//
                            s/[[:space:]][[:space:]]*/|/g'`
    modulefilter="\$7 ~ /($m)\$/ { print }"
fi

awk '/^[0-9]+\.[0-9]+% of[[:space:]]*[0-9]+ lines of code executed/ { printf "%s %s ", $1, $3}
    /^[0-9]+\.[0-9]+% of[[:space:]]*[0-9]+ branches of code taken/ { printf "%s %s %s ", $1, $3, $NF }
    /^=== / { print $2, $4; }' $sourcefile |
    awk "$modulefilter" |
    $sortmode |
    awk -vSUBDIR=$datadir \
        '$2 != 0 { fname=$5; gsub(/\//, "-", fname);
                   printf "<tr><td>%s<td>%s<td>%s<td>%s<td>%s<td><a href=\"%s\">%s</a></tr>\n",
                   $3, $4, $1, $2, $7, (SUBDIR ? SUBDIR fname ".html" : "#" $6) , $5 }' >>$outputfile

echo "</TABLE>" >>$outputfile

if test -n "$datadir"; then
    echo "</BODY>" >>$outputfile
    echo "</HTML>" >>$outputfile
fi

awk -vSUBDIR=$datadir ' BEGIN { myfile = "/dev/stdout" }
      /^\*\*\*|[[:space:]]*-:[[:space:]]*0:/ { next }
      /^======/ { print "</pre>" >>myfile;
                  if (SUBDIR) {
                     print "</body>" >>myfile
                     print "</html>" >>myfile
                     close(myfile)
                  }
                  next }
      /^=== / {
          if (SUBDIR) {
             name=filename
             gsub(/\//, "-", name)
             myfile=SUBDIR name ".html"
             print "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">" >myfile
             print "<HTML>" >>myfile
             print "<HEAD>" >>myfile
             print "<META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=utf-8\">" >>myfile
             print "<TITLE>TCE Annotated Source for " filename "</TITLE>" >>myfile
             print "</HEAD>" >>myfile
             print "<BODY LANG=\"en-US\" DIR=\"LTR\">" >>myfile
          }
          printf "<h2>%s</h2>\n", filename >> myfile
          printf "<p><a name=\"%s\"></a>\n<pre>", $2 >> myfile
          print header >> myfile
          header = ""
          next
      }
      /^[0-9]+\.[0-9]+%/ {
          filename=$NF
          header=header $0 "\n"
          next
      }
      { gsub(/&/, "\\&amp;"); gsub(/</, "\\&lt;"); gsub(/>/, "\\&gt;"); gsub(/"/, "\\&quot;"); print >> myfile}' $sourcefile >>$outputfile

