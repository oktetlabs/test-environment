#! /usr/bin/awk -f
#
# Test Coverage Estimation report generator
#
#
# Copyright (C) 2007 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
# 
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA  02111-1307  USA
#
#
# Author: Artem V. Andreev <Artem.Andreev@oktetlabs.ru>
#
# $Id$
#

BEGIN { 
    FS=":"; 
    runs = 1; 
    fun = "*"; 
    lines = 0;
    executed = 0;
    nbranches = 0;
    exbranches = 0;
}

$2 == 0 { 
    if ($3 == "Source")
    {
        if ((getline tmp < $4) > 0)
        {
            ("cksum " $4) | getline sourcefile;
        }
        else
        {
            sourcefile = "n/a n/a " $4
        }
    }
    else if ($3 == "Data" || $3 == "Object")
    {
    	objfile = $4
    }
    else if ($3 == "Runs")
    {
        runs = $4 + 0;
    }
    next
}

{
    if (!header)
    {
        header = 1;
        print "FILE", objfile, sourcefile, checksum, runs
    }
}

NF == 1 {
    split($0, subfields, " ")
    if (subfields[1] == "function")
    {
        fun = subfields[4] ":" subfields[6] ":" subfields[9]
        gsub(/%/, "", fun);
    }
    else if (subfields[1] == "branch")
    {
        branches[subfields[2] + 0] = subfields[4] + 0;
        nbranches++;
        if (subfields[4] + 0 != 0) exbranches++;
    }
    else if (subfields[1] == "call")
    {
        calls[subfields[2] + 0] = subfields[4] + 0
    }
    next
}

function print_branches() {
    bs = "";
    for (i = 0; i in branches; i++)
    {
        bs = bs branches[i] ":"
    }
    cs = "";
    for (i = 0; i in calls; i++)
    {
        cs = cs calls[i] ":"
    }
    sub(/:$/, "", bs);
    sub(/:$/, "", cs);
    print " ", fun, bs ? bs : "*", cs ? cs : "*"
}

{
    if (header > 1)
    {
        print_branches();
    }
    else
    {
        header++;
    }
    
    split("", branches);
    split("", calls);
    fun = "*"    
}

$1 ~ /#$/ { lines++; printf 0; next }
{
    gsub(/[[:space:]]/, "");
    if ($1 != "-") 
    {
        lines++;
        executed++;
    }
    printf $1;
}

END { 
    print_branches(); 
    print "SUMMARY", lines, executed, nbranches, exbranches
}

    

