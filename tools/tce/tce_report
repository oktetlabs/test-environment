#! /bin/sh
#
# Test Coverage Estimation report generator
#
#
# Copyright (C) 2005 Test Environment authors (see file AUTHORS in
# the root directory of the distribution).
#
# Test Environment is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
# 
# Test Environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA  02111-1307  USA
#
#
# Author: Artem V. Andreev <Artem.Andreev@oktetlabs.ru>
#
# $Id$
#

usage() {
    if test -n "$1" ; then
        echo -e "$1" >&2
    fi
    cat >&2 <<EOF

USAGE: tce_report [--ignore-dirs] <input-file> <output-file> <source-dir> 
                  [--exclude=regexp] 

Processes GCOV data contained in the file <input-file> which should
correspond to sources in <source-dir>. Coverage results are put into
<output-file>.

If <output-file> exists and it matches the current sources, the results
are merged (the older <output-file> is saved as <output-file>.prev)

--ignore-dirs causes treating files with the same base name as the same file.
--exclude=REGEXP specifies a pattern for files to be excluded from the report.
REGEXP must be a basic regexp (sed-like), with "^" prepended implicitly.

EOF
    exit 1
}

nfile=1
for i; do
    case "$i" in
        --help) 
        usage
        ;;
        --ignore-dirs)
        ignoredir=yes
        ;;
        --exclude=*)
        exclude=${i#--exclude=}
        ;;
        --*) usage "Unknown option $i";;
        *) case $nfile in
            1) infile=$i ;;
            2) mergefile=$i ;;
            3) srcdir=$i ;;
            *) usage "Extra files on command line";;
        esac
        nfile=$((nfile + 1))
        ;;
    esac
done

if test $nfile -ne 4 ; then
    usage "Invalid number of arguments: $nfile"
fi

mapfile=${infile%.tar}.map
smapfile=${infile%.tar}.smap

if test -z "$infile" -o -z "$mergefile" -o -z "$srcdir" ; then
    usage "Invalid arguments"
fi

if test -z "`which tce_merge`" ; then
    mydir=`dirname $0`
    if test -x "${mydir}/tce_merge" ; then
        export PATH="${mydir}:${PATH}"
    else
        echo "Supporting scripts not found!!!" >&2
        exit 1
    fi
fi


# cleanup files that might remain from previous sessions
for pattern in '*.gcov' '*.da' '*.gcda' '.[a-z]*.da' '.[a-z]*.gcda'; do
    find $srcdir -follow -name "$pattern" -exec rm -f '{}' ';'
done

# convert gcov raw data to annotated sources
tar -x -P -f $infile
cat $mapfile | xargs -n2 tce_gcov >$smapfile

# merge the results
if test -f "$mergefile"; then
    cp "$mergefile" "$mergefile".prev
fi
cat $smapfile | xargs -n2 tce_merge $mergefile "$ignoredir" "$exclude" 



