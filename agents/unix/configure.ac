dnl                                               -*- Autoconf -*-
dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT([ta-unix],[0.55555],[Elena.Vengerova@oktetlabs.ru])
AC_CONFIG_SRCDIR([main.c])

AC_CONFIG_AUX_DIR([../../auxdir])
AC_CONFIG_MACRO_DIR([../../auxdir])

AM_INIT_AUTOMAKE([1.8.5 foreign -Wall])

dnl Checks for programs.
AC_PROG_CC
AC_C_INLINE

AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_YACC

AC_CHECK_TOOL(NM, nm)

if test -z "$host" ; then
AC_CANONICAL_HOST
fi

TE_APP_SET

AC_SUBST([host])
AC_SUBST([with_name])

if test -n "$with_netlink" -o -n "$with_netlink_route" ; then
    AC_MSG_WARN([--with-netlink and --with-netlink-route are not
                 supported any more])
fi

if test x"$host" != x"${host/linux/}" ; then
    # Linux platform
    ifcfg_via_netlink=yes
fi

AC_ARG_ENABLE([wifi],
              AS_HELP_STRING([--enable-wifi],
                             [enable WiFi support (default is NO)]),
              [ac_cv_enable_wifi=$enableval], [ac_cv_enable_wifi=no])
AC_CACHE_CHECK([whether to enable WiFi],
               [ac_cv_enable_wifi], [ac_cv_enable_wifi=no])

if test x"$ac_cv_enable_wifi" != xno
then
dnl
dnl Check that we have iwlib installed in our system
dnl
    AC_CHECK_HEADERS([iwlib.h], [],
                     AC_MSG_ERROR([Cannot find iwlib.h header]))
    AC_CHECK_LIB([iw], [iw_sockets_open], [],
                 AC_MSG_ERROR([Cannot find iw library]))

    AC_DEFINE([ENABLE_WIFI_SUPPORT], [], [Whether to enable WiFi support])
    LDADD="$LDADD -liw"
fi

AM_CONDITIONAL([CFG_UNIX_WIFI], test x"$ac_cv_enable_wifi" != xno)

AC_ARG_ENABLE([8021x],
              AS_HELP_STRING([--enable-8021x],
                             [enable IEEE802.1x support (default is NO)]),
              [ac_cv_enable_8021x=$enableval], [ac_cv_enable_8021x=no])
AC_CACHE_CHECK([whether to enable 802.1x],
               [ac_cv_enable_8021x], [ac_cv_enable_8021x=no])

if test x"$ac_cv_enable_8021x" != xno
then
    EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -DENABLE_8021X"
fi

if test -z "$with_tad" ; then
    with_tad=tad
fi
AC_SUBST([TAD], [$with_tad])

AC_SUBST([TAD_LIBS])

AC_CONFIG_HEADERS([config.h])

dnl
dnl Try to find IP_MTU socket option definition.
dnl
AH_TEMPLATE([MY_IP_MTU],
    [Cope with strange location of IP_MTU socket option definition])

AC_CHECK_HEADER([sys/socket.h],
    [AC_MSG_CHECKING([for IP_MTU in sys/socket.h])
     AC_COMPILE_IFELSE([
#include <sys/socket.h>
int a = IP_MTU;],
         [AC_MSG_RESULT(found)],
         [AC_MSG_RESULT([not found])
          AC_CHECK_HEADER([linux/in.h],
              [AC_MSG_CHECKING([for IP_MTU in linux/in.h])
               AC_COMPILE_IFELSE([
#include <sys/socket.h>
#include <linux/in.h>
int a = IP_MTU;],
                   [AC_MSG_RESULT([found])
                    my_ip_mtu=`grep "#[ \t]*define[ \t][ \t]*IP_MTU\>" \
                               /usr/include/linux/in.h | sed -s \
    "s/#[ \t]*define[ \t][ \t]*IP_MTU[ \t][ \t]*\([0-9]*\)[ \t]*$/\1/"`
                    AC_DEFINE_UNQUOTED([MY_IP_MTU], [$my_ip_mtu])],
                   [AC_MSG_RESULT([not found])])
              ], [], [#include <sys/socket.h>])])], [],
[
#if HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
])

DS_SOURCES=
if test -n "$with_cfg_unix_daemons" ; then
  DAEMONS_CFLAGS=-DCFG_UNIX_DAEMONS
  for i in $with_cfg_unix_daemons ; do
    case $i in 
        tftp)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_TFTP_SERVER"
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;
            
        ftp)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_FTP_SERVER" 
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;            
        dns)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_DNS_SERVER" ;;
            
        echo)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_ECHO_SERVER"
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;
            
        todudp)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_TODUDP_SERVER"
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;
            
        telnet)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_TELNET"
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;
            
        rsh)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_RSH"
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_XINETD" 
            ;;
            
        dhcp)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_DHCP_SERVER" ;
            ;;

        radius)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_RADIUS_SERVER" ;
            ;;
            
        smtp)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_SMTP" ;;
            
        sshd) ;;
        
        Xvfb) ;;
        
        vncserver)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_VNCSERVER" ;;
        
        vtund)
            DAEMONS_CFLAGS="$DAEMONS_CFLAGS -DWITH_VTUND" ;;
            
        *)  ;; 
    esac
  done
fi
AC_SUBST([DAEMONS_CFLAGS])
AC_SUBST([DAEMONS_LDADD])


AM_CONDITIONAL(CFG_UNIX_DAEMONS, test -n "$with_cfg_unix_daemons")
AM_CONDITIONAL(CFG_UNIX_DAEMONS_NAMED, 
    [expr "$with_cfg_unix_daemons" : ".*dns" >/dev/null])
AM_CONDITIONAL(CFG_UNIX_DAEMONS_ISC_DHCP_SERVER,
    [expr "$with_cfg_unix_daemons" : ".*dhcp" >/dev/null])
AM_CONDITIONAL(CFG_UNIX_DAEMONS_VTUND, 
    [expr "$with_cfg_unix_daemons" : ".*vtund" >/dev/null])
AM_CONDITIONAL(CFG_RCF_RPC, test -n "$with_rcf_rpc")
AM_CONDITIONAL([CFG_UNIX_AUTH],
    [test x"$ac_cv_enable_8021x" != xno ||
     expr "$with_cfg_unix_daemons" : ".*radius" >/dev/null])
AM_CONDITIONAL(ISCSI_TARGET_USE, test -n "$with_iscsi")


dnl #######################################################################
dnl Newer BSD systems don't have a compatible rtentry - use ortentry
dnl #######################################################################
AC_CHECK_TYPES([struct rtentry, struct ortentry], [], [],
               [#include <sys/types.h>
                #include <sys/socket.h>
                #include <net/route.h>])

dnl
dnl Check for 'struct ip_mreqn'
dnl
AC_CHECK_TYPES([struct ip_mreqn], [], [],
               [#include <netinet/in.h>])

dnl
dnl Check for 'ipv6mr_interface' member in 'struct ipv6_mreq'.
dnl
AC_CHECK_MEMBERS([struct ipv6_mreq.ipv6mr_interface], [], [],
                 [#include <netinet/in.h>])
dnl
dnl Check for 'ipv6mr_ifindex' member in 'struct ipv6_mreq'.
dnl
AC_CHECK_MEMBERS([struct ipv6_mreq.ipv6mr_ifindex], [], [],
                 [#include <netinet/in.h>])

dnl
dnl Check for 'struct lifreq'
dnl
AC_CHECK_TYPES([struct lifreq], [], [], [#include <net/if.h>])

dnl
dnl Check for 'ifr_mtu' member in 'struct ifreq'.
dnl
AC_CHECK_MEMBERS([struct ifreq.ifr_mtu], [], [], [
#include "te_config.h"
#if HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#if HAVE_NET_IF_H
#include <net/if.h>
#endif
])

dnl
dnl Check for 'sa_restorer' member in 'struct sigaction'.
dnl
AC_CHECK_MEMBERS([struct sigaction.sa_restorer], [], [],
                 [#include <signal.h>])

dnl
dnl Check for 'arp_dev' member in 'struct arpreq'.
dnl
AC_CHECK_MEMBERS([struct arpreq.arp_dev], [], [],
                 [#include <net/if_arp.h>])

dnl
dnl Check for 'sival_int' member in 'union sigval'.
dnl
AC_CHECK_MEMBERS([union sigval.sival_int], [], [],
                 [#include <signal.h>])

dnl
dnl Check for 'sigval_int' member in 'union sigval'.
dnl
AC_CHECK_MEMBERS([union sigval.sigval_int], [], [],
                 [#include <signal.h>])

dnl
dnl Check for 'sival_ptr' member in 'union sigval'.
dnl
AC_CHECK_MEMBERS([union sigval.sival_ptr], [], [],
                 [#include <signal.h>])

dnl
dnl Check for 'sigval_ptr' member in 'union sigval'.
dnl
AC_CHECK_MEMBERS([union sigval.sigval_ptr], [], [],
                 [#include <signal.h>])

dnl
dnl Berkley Socket API is provided by:
dnl - -lc on Linux, FreeBSD (5, 6), NetNSD (1.6, 2.0);
dnl - -lsocket on Solaris2 (SunOS 5.11).
dnl
AC_SEARCH_LIBS([socket], [socket], [],
    AC_MSG_ERROR([No library with Berkley Socket API found]))

dnl
dnl POSIX threads are provided by:
dnl - -lpthread in Linux;
dnl - -lc_r (-lkse) in FreeBSD;
dnl - -lpthread in NetBSD ('pth' package).
dnl
AC_SEARCH_LIBS([pthread_create], [pthread kse c_r], [],
               AC_MSG_ERROR([No POSIX threads]))
AC_SEARCH_LIBS([pthread_atfork], [pthread kse c_r], [],
               AC_MSG_ERROR([pthread_atfork is not supported]))

dnl
dnl POSIX semaphores are provided by:
dnl - -lpthread on Linux;
dnl - -lc_r on FreeBSD (5, 6);
dnl - -lsemaphore on NetBSD ('pthread-sem' package);
dnl - -lrt on Solaris2 (SunOS 5.11).
dnl
AC_SEARCH_LIBS([sem_init], [pthread c_r semaphore rt], [],
               AC_MSG_ERROR([No POSIX semaphores]))

if test -n "$with_rcf_rpc" -o -n "$with_cfg_unix_daemons" ; then
    dnl
    dnl Dynamic linker functions are provided by:
    dnl - -ldl in Linux;
    dnl - -lc in FreeBSD;
    dnl - N/A for NetBSD, since automatically included in every dynamically
    dnl   linked program.
    dnl
    AC_CHECK_FUNC([dlopen], [],
                  AC_CHECK_LIB([dl], [dlopen], [],
                               AC_MSG_ERROR([No dynamic linker API found])))
fi

if test -n "$with_rcf_rpc" ; then
    dnl
    dnl FreeBSD 4.x has no svc_exit().
    dnl NetBSD has no svcunix_create().
    dnl
    AC_CHECK_FUNCS([svcunix_create svc_exit])

    dnl
    dnl Asynchronous I/O:
    dnl - FreeBSD has in -lc;
    dnl - Linux has in -lnsl -lrt;
    dnl - Solaris2 (SunOS 5.11) in -lrt;
    dnl - NetBSD does not have.
    dnl
    AC_CHECK_FUNC([aio_read], [],
        AC_SEARCH_LIBS([aio_read], [rt], [],
            AC_CHECK_LIB([nsl], [aio_read], [LIBS="-lnsl -lrt ${LIBS}"],
                 AC_MSG_WARN([Asynchronous I/O not supported]), [-lrt])))

    dnl
    dnl Find library with SunRPC XDR functions.
    dnl -lnsl on Solaris2 (SunOS 5.11);
    dnl
    AC_SEARCH_LIBS([xdr_bytes], [rpc nsl], [],
                   AC_MSG_ERROR([No RPC library found]))

    AH_TEMPLATE([xdr_uint8_t], [RPC XDR for unsigned 8bit width type])
    AC_CHECK_FUNC([xdr_uint8_t], [],
        [AC_CHECK_FUNC([xdr_u_int8_t],
            [AC_DEFINE([xdr_uint8_t], [xdr_u_int8_t])],
            [AC_CHECK_FUNC([xdr_u_char],
                [AC_DEFINE([xdr_uint8_t], [xdr_u_char])],
                [AC_MSG_ERROR([There is no xdr_uint8_t or xdr_u_int8_t!])]
             )])])

    AH_TEMPLATE([xdr_uint16_t], [RPC XDR for unsigned 8bit width type])
    AC_CHECK_FUNC([xdr_uint16_t], [],
        [AC_CHECK_FUNC([xdr_u_int16_t],
            [AC_DEFINE([xdr_uint16_t], [xdr_u_int16_t])],
            [AC_MSG_ERROR([There is no xdr_uint16_t or xdr_u_int16_t!])])])

    AH_TEMPLATE([xdr_uint32_t], [RPC XDR for unsigned 32bit width type])
    AC_CHECK_FUNC([xdr_uint32_t], [],
        [AC_CHECK_FUNC([xdr_u_int32_t],
            [AC_DEFINE([xdr_uint32_t], [xdr_u_int32_t])],
            [AC_MSG_ERROR([There is no xdr_uint32_t or xdr_u_int32_t!])])])

    AH_TEMPLATE([xdr_uint64_t], [RPC XDR for unsigned 64bit width type])
    AC_CHECK_FUNC([xdr_uint64_t], [],
        [AC_CHECK_FUNC([xdr_u_int64_t],
            [AC_DEFINE([xdr_uint64_t], [xdr_u_int64_t])],
            [AC_MSG_ERROR([There is no xdr_uint64_t or xdr_u_int64_t!])])])
fi

if test -n "$with_ifconfig" ; then
    EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -DUSE_IFCONFIG"
elif test -n "$ifcfg_via_netlink" ; then
    # On Linux netlink is default way to configure interfaces and IP
    use_netlink=yes
    EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -DUSE_NETLINK"
    AC_CHECK_LIB([netlink], [rtnl_open], [],
                 AC_MSG_ERROR([Cannot find libnetlink!]))
else 
    # The rest should use IOCTL interface for now
    EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -DUSE_IOCTL"
fi
AM_CONDITIONAL(CFG_NETLINK_USE, test -n "$use_netlink")

if test -n "$with_iscsi"; then
    EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -DWITH_ISCSI"
fi    

export PKG_CONFIG_PATH="$DESTDIR/$prefix/../$host/lib/pkgconfig/"

PKG_CHECK_MODULES(TAD, te-$with_tad)

dnl
dnl util library is necessary for static linking of expect
dnl
AC_SEARCH_LIBS([openpty], [util])

AC_CONFIG_FILES([Makefile])

AC_SUBST([EXTRA_CPPFLAGS])

TE_APP_RESTORE

AC_OUTPUT

